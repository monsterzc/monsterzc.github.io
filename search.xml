<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nacos注册中心原理</title>
      <link href="/post/cc38c2e5.html"/>
      <url>/post/cc38c2e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、nacos注册中心原理"><a href="#一、nacos注册中心原理" class="headerlink" title="一、nacos注册中心原理"></a>一、nacos注册中心原理</h1><h2 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h2><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230524233710857.png" alt="image-20230524233710857"></p><p>整个注册中心的注册和发现流程主要有三个方面来完成：服务的提供方（简称server）、服务的消费者（client）、注册中心（nacos）。</p><p>server和nacos的交互过程：</p><p>server需要通过nacos官方的OpenAPi提供的接口来发起服务注册请求，随后server会定时向nacos发送心跳来进行心跳检测，对于使用者来说这一步可以采用ScheduleExecutorService创建定时任务来完成。nacos会异步的处理注册请求和心跳任务。</p><p><strong>nacos心跳机制</strong></p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230524234854641.png" alt="image-20230524234854641"></p><p>nacos和client之间采用推拉结合的交互模式，一方面client可以通过定时任务每隔10s向nacos发起查询请求，如果服务列表改变nacos就返回新列表，另一方面当本地服务实例发生变化时（即server实例注册成功或心跳停止中断链接），nacos会主动通过UDP协议推送到client，udp协议非常快，不需要保持长链接。而注册中心的场景中client数量往往多于server，如果每一次服务更新，nacos要和成千上万的服务消费者去建立Tcp请求的话性能肯定是不行的。而如果UDP通知失败，客户端每10s还会主动去拉一次，客户端和服务器推送时互补的，这样既能保证server实例更新的实效性，又能提高效率。</p><p><strong>分析nacos服务注册源码</strong></p><p>官方OpenApi服务注册</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525000211142.png" alt="image-20230525000211142"></p><h2 id="源码运行"><a href="#源码运行" class="headerlink" title="源码运行"></a>源码运行</h2><p>项目结构如下：（下载的版本是1.4.5 mac m1）</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525232057058.png" alt="image-20230525232057058"></p><p>项目启动在console模块，选择主程序Nacos运行</p><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h4 id="1-consistency模块实体类的缺失"><a href="#1-consistency模块实体类的缺失" class="headerlink" title="1. consistency模块实体类的缺失"></a>1. consistency模块实体类的缺失</h4><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525232424965.png" alt="image-20230525232424965"></p><p>idea安装插件Protobuf插件，然后maven选择consistency模块complie进行编译</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525232738659.png" alt="image-20230525232738659"></p><p>maven 编译有问题，在maven的setting.xml文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">      apple-silicon</span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>apple-silicon<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">os.detected.classifier</span>&gt;</span>osx-x86_64<span class="tag">&lt;/<span class="name">os.detected.classifier</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新进行compile，解决</p><h2 id="启动报错Unable-to-start-embedded-Tomcat"><a href="#启动报错Unable-to-start-embedded-Tomcat" class="headerlink" title="启动报错Unable to start embedded Tomcat"></a>启动报错Unable to start embedded Tomcat</h2><p>在VM options 加入-Dnacos.standalone&#x3D;true<img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525233402397.png" alt="image-20230525233402397"></p><h4 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h4><p>在distribution模块下，创建数据库</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525233611857.png" alt="image-20230525233611857"></p><p>然后在console模块下application.properties 进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525233653657.png" alt="image-20230525233653657"></p><p>运行成功,访问nacos</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525233801107.png" alt="image-20230525233801107"></p><p>追踪源码<img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525234244751.png" alt="image-20230525234244751"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@ConditionalOnNacosDiscoveryEnabled</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(value = &quot;spring.cloud.service-registry.auto-registration.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; AutoServiceRegistrationConfiguration.class,</span></span><br><span class="line"><span class="meta">AutoServiceRegistrationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> NacosServiceRegistry <span class="title function_">nacosServiceRegistry</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosDiscoveryProperties nacosDiscoveryProperties)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosServiceRegistry</span>(nacosDiscoveryProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(AutoServiceRegistrationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> NacosRegistration <span class="title function_">nacosRegistration</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosDiscoveryProperties nacosDiscoveryProperties,</span></span><br><span class="line"><span class="params">ApplicationContext context)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosRegistration</span>(nacosDiscoveryProperties, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(AutoServiceRegistrationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> NacosAutoServiceRegistration <span class="title function_">nacosAutoServiceRegistration</span><span class="params">(</span></span><br><span class="line"><span class="params">NacosServiceRegistry registry,</span></span><br><span class="line"><span class="params">AutoServiceRegistrationProperties autoServiceRegistrationProperties,</span></span><br><span class="line"><span class="params">NacosRegistration registration)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosAutoServiceRegistration</span>(registry,</span><br><span class="line">autoServiceRegistrationProperties, registration);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到NacosAutoServiceRegistration继承的父类AbstractAutoServiceRegistration</p><p>追踪bind()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> &#123;</span><br><span class="line">bind(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(WebServerInitializedEvent event)</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> event.getApplicationContext();</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> ConfigurableWebServerApplicationContext) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;management&quot;</span>.equals(((ConfigurableWebServerApplicationContext) context)</span><br><span class="line">.getServerNamespace())) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.port.compareAndSet(<span class="number">0</span>, event.getWebServer().getPort());</span><br><span class="line"><span class="built_in">this</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪start()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Discovery Lifecycle disabled. Not starting&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only initialize if nonSecurePort is greater than 0 and it isn&#x27;t already running</span></span><br><span class="line"><span class="comment">// because of containerPortInitializer below</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.running.get()) &#123;</span><br><span class="line"><span class="built_in">this</span>.context.publishEvent(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InstancePreRegisteredEvent</span>(<span class="built_in">this</span>, getRegistration()));</span><br><span class="line">register();</span><br><span class="line"><span class="keyword">if</span> (shouldRegisterManagement()) &#123;</span><br><span class="line">registerManagement();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.context.publishEvent(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InstanceRegisteredEvent</span>&lt;&gt;(<span class="built_in">this</span>, getConfiguration()));</span><br><span class="line"><span class="built_in">this</span>.running.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入register()方法</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525234841564.png" alt="image-20230525234841564"></p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525234902914.png" alt="image-20230525234902914"></p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525234922854.png" alt="image-20230525234922854"></p><p> <img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525235248768.png" alt="image-20230525235248768"></p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230525235136568.png" alt="image-20230525235136568"></p><p>继续NamingProxy#registerService()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerService</span><span class="params">(String serviceName, String groupName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line"></span><br><span class="line">        NAMING_LOGGER.info(<span class="string">&quot;[REGISTER-SERVICE] &#123;&#125; registering service &#123;&#125; with instance: &#123;&#125;&quot;</span>,</span><br><span class="line">            namespaceId, serviceName, instance);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(<span class="number">9</span>);</span><br><span class="line">        params.put(CommonParams.NAMESPACE_ID, namespaceId);</span><br><span class="line">        params.put(CommonParams.SERVICE_NAME, serviceName);</span><br><span class="line">        params.put(CommonParams.GROUP_NAME, groupName);</span><br><span class="line">        params.put(CommonParams.CLUSTER_NAME, instance.getClusterName());</span><br><span class="line">        params.put(<span class="string">&quot;ip&quot;</span>, instance.getIp());</span><br><span class="line">        params.put(<span class="string">&quot;port&quot;</span>, String.valueOf(instance.getPort()));</span><br><span class="line">        params.put(<span class="string">&quot;weight&quot;</span>, String.valueOf(instance.getWeight()));</span><br><span class="line">        params.put(<span class="string">&quot;enable&quot;</span>, String.valueOf(instance.isEnabled()));</span><br><span class="line">        params.put(<span class="string">&quot;healthy&quot;</span>, String.valueOf(instance.isHealthy()));</span><br><span class="line">        params.put(<span class="string">&quot;ephemeral&quot;</span>, String.valueOf(instance.isEphemeral()));</span><br><span class="line">        params.put(<span class="string">&quot;metadata&quot;</span>, JSON.toJSONString(instance.getMetadata()));</span><br><span class="line"></span><br><span class="line">        reqAPI(UtilAndComs.NACOS_URL_INSTANCE, params, HttpMethod.POST);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>去到nacos源码找到naming模块controller下的InstanceController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + &quot;/instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceController</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register new instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request http request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#x27;ok&#x27; if success</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception any error during register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CanDistro</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@Secured(parser = NamingResourceParser.class, action = ActionTypes.WRITE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">namespaceId</span> <span class="operator">=</span> WebUtils</span><br><span class="line">                .optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">        NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> parseInstance(request);</span><br><span class="line">        <span class="comment">// 注册服务实例</span></span><br><span class="line">        serviceManager.registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它是通过registerInstance（）方法完成服务实例注册的</p><p>ServiceManager实现了RecordListener接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceManager</span> <span class="keyword">implements</span> <span class="title class_">RecordListener</span>&lt;Service&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 服务注册</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerInstance</span><span class="params">(String namespaceId, String serviceName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">        </span><br><span class="line">        createEmptyService(namespaceId, serviceName, instance.isEphemeral());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (service == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NacosException</span>(NacosException.INVALID_PARAM,</span><br><span class="line">                    <span class="string">&quot;service not found, namespace: &quot;</span> + namespaceId + <span class="string">&quot;, service: &quot;</span> + serviceName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        addInstance(namespaceId, serviceName, instance.isEphemeral(), instance);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 添加实例</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInstance</span><span class="params">(String namespaceId, String serviceName, <span class="type">boolean</span> ephemeral, Instance... ips)</span></span><br><span class="line">            <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KeyBuilder.buildInstanceListKey(namespaceId, serviceName, ephemeral);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">synchronized</span> (service) &#123;</span><br><span class="line">            List&lt;Instance&gt; instanceList = addIpAddresses(service, ephemeral, ips);</span><br><span class="line">            </span><br><span class="line">            <span class="type">Instances</span> <span class="variable">instances</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Instances</span>();</span><br><span class="line">            instances.setInstanceList(instanceList);</span><br><span class="line">            <span class="comment">//存放服务实例</span></span><br><span class="line">            consistencyService.put(key, instances);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进consistencyService.put(key, instances);有一个实现类DistroConsistencyServiceImpl</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526000333818.png" alt="image-20230526000333818"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EphemeralConsistencyService</span>, DistroDataProcessor &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Record value)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">          onPut(key, value);</span><br><span class="line">          distroProtocol.sync(<span class="keyword">new</span> <span class="title class_">DistroKey</span>(key, KeyBuilder.INSTANCE_LIST_KEY_PREFIX), DataOperation.CHANGE,</span><br><span class="line">                  globalConfig.getTaskDispatchPeriod() / <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPut</span><span class="params">(String key, Record value)</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (KeyBuilder.matchEphemeralInstanceListKey(key)) &#123;</span><br><span class="line">              Datum&lt;Instances&gt; datum = <span class="keyword">new</span> <span class="title class_">Datum</span>&lt;&gt;();</span><br><span class="line">              datum.value = (Instances) value;</span><br><span class="line">              datum.key = key;</span><br><span class="line">              datum.timestamp.incrementAndGet();</span><br><span class="line">              dataStore.put(key, datum);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!listeners.containsKey(key)) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//notifier是一个阻塞队列，我们把注册任务添加进去</span></span><br><span class="line">          notifier.addTask(key, DataOperation.CHANGE);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String datumKey, DataOperation action)</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (services.containsKey(datumKey) &amp;&amp; action == DataOperation.CHANGE) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (action == DataOperation.CHANGE) &#123;</span><br><span class="line">                services.put(datumKey, StringUtils.EMPTY);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// 将请求放入阻塞队列里面</span></span><br><span class="line">            tasks.offer(Pair.with(datumKey, action));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>notifier是一个阻塞队列我们把注册任务添加进去，然后执行，将请求写入和执行请求分开，异步处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DependsOn(&quot;ProtocolManager&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service(<span class="string">&quot;distroConsistencyService&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistroConsistencyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EphemeralConsistencyService</span>, DistroDataProcessor &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 创建notifie对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">Notifier</span> <span class="variable">notifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Notifier</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当前对象创建的时候将notifier任务加入线程池执行</span></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    GlobalExecutor.submitDistroNotifyTask(notifier);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">DISTRO_NOTIFY_EXECUTOR</span> <span class="operator">=</span> ExecutorFactory.Managed</span><br><span class="line">            .newSingleScheduledExecutorService(ClassUtils.getCanonicalName(NamingApp.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameThreadFactory</span>(<span class="string">&quot;com.alibaba.nacos.naming.distro.notifier&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将任务加入到线程池</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">submitDistroNotifyTask</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">        DISTRO_NOTIFY_EXECUTOR.submit(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifier</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            Loggers.DISTRO.info(<span class="string">&quot;distro notifier started&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 取出任务 </span></span><br><span class="line">                    Pair&lt;String, DataOperation&gt; pair = tasks.take();</span><br><span class="line">                  <span class="comment">// 处理任务</span></span><br><span class="line">                    handle(pair);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    Loggers.DISTRO.error(<span class="string">&quot;[NACOS-DISTRO] Error while handling notifying task&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续追踪DelegateConsistencyServiceImpl.Notifier#handle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Pair&lt;String, DataOperation&gt; pair)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">datumKey</span> <span class="operator">=</span> pair.getValue0();</span><br><span class="line">                <span class="type">DataOperation</span> <span class="variable">action</span> <span class="operator">=</span> pair.getValue1();</span><br><span class="line">                <span class="comment">// 从缓存中移除</span></span><br><span class="line">                services.remove(datumKey);</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                ConcurrentLinkedQueue&lt;RecordListener&gt; recordListeners = listeners.get(datumKey);</span><br><span class="line">                <span class="keyword">if</span> (recordListeners == <span class="literal">null</span>) &#123;</span><br><span class="line">                    Loggers.DISTRO.info(<span class="string">&quot;[DISTRO-WARN] RecordListener not found, key: &#123;&#125;&quot;</span>, datumKey);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (RecordListener listener : recordListeners) &#123;</span><br><span class="line">                    </span><br><span class="line">                    count++;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                      <span class="comment">// 通知数据已经变更</span></span><br><span class="line">                        <span class="keyword">if</span> (action == DataOperation.CHANGE) &#123; <span class="comment">// 发生变更</span></span><br><span class="line">                            <span class="type">Datum</span> <span class="variable">datum</span> <span class="operator">=</span> dataStore.get(datumKey);</span><br><span class="line">                            <span class="keyword">if</span> (datum != <span class="literal">null</span>) &#123;</span><br><span class="line">                                listener.onChange(datumKey, datum.value);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Loggers.DISTRO.info(<span class="string">&quot;[DISTRO-WARN] data not found, key: &#123;&#125;&quot;</span>, datumKey);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 通知数据删除</span></span><br><span class="line">                        <span class="keyword">if</span> (action == DataOperation.DELETE) &#123; <span class="comment">// 删除</span></span><br><span class="line">                            listener.onDelete(datumKey);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        Loggers.DISTRO.error(<span class="string">&quot;[NACOS-DISTRO] error while notifying listener of key: &#123;&#125;&quot;</span>, datumKey, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (Loggers.DISTRO.isDebugEnabled()) &#123;</span><br><span class="line">                    Loggers.DISTRO</span><br><span class="line">                            .debug(<span class="string">&quot;[NACOS-DISTRO] datum change notified, key: &#123;&#125;, listener count: &#123;&#125;, action: &#123;&#125;&quot;</span>,</span><br><span class="line">                                    datumKey, count, action.name());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Loggers.DISTRO.error(<span class="string">&quot;[NACOS-DISTRO] Error while handling notifying task&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>追踪Service#onChange</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(String key, Instances value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        Loggers.SRV_LOG.info(<span class="string">&quot;[NACOS-RAFT] datum is changed, key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Instance instance : value.getInstanceList()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Reject this abnormal instance list:</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;got null instance &quot;</span> + key);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">          <span class="comment">// 处理权重问题</span></span><br><span class="line">            <span class="keyword">if</span> (instance.getWeight() &gt; <span class="number">10000.0D</span>) &#123;</span><br><span class="line">                instance.setWeight(<span class="number">10000.0D</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (instance.getWeight() &lt; <span class="number">0.01D</span> &amp;&amp; instance.getWeight() &gt; <span class="number">0.0D</span>) &#123;</span><br><span class="line">                instance.setWeight(<span class="number">0.01D</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新instance，核心在updateIPs这个方法中，参数1是instance集合，参数2时否是临时借点</span></span><br><span class="line">        updateIPs(value.getInstanceList(), KeyBuilder.matchEphemeralInstanceListKey(key));</span><br><span class="line">        </span><br><span class="line">        recalculateChecksum();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Service#updateIPs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateIPs</span><span class="params">(Collection&lt;Instance&gt; instances, <span class="type">boolean</span> ephemeral)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;Instance&gt;&gt; ipMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(clusterMap.size());</span><br><span class="line">        <span class="keyword">for</span> (String clusterName : clusterMap.keySet()) &#123;</span><br><span class="line">            ipMap.put(clusterName, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Instance instance : instances) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    Loggers.SRV_LOG.error(<span class="string">&quot;[NACOS-DOM] received malformed ip: null&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(instance.getClusterName())) &#123;</span><br><span class="line">                  <span class="comment">// cluster是null就设置为default</span></span><br><span class="line">                    instance.setClusterName(UtilsAndCommons.DEFAULT_CLUSTER_NAME);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">              <span class="comment">// cluster不存在的话就创建对应的cluster</span></span><br><span class="line">                <span class="keyword">if</span> (!clusterMap.containsKey(instance.getClusterName())) &#123;</span><br><span class="line">                    Loggers.SRV_LOG</span><br><span class="line">                            .warn(<span class="string">&quot;cluster: &#123;&#125; not found, ip: &#123;&#125;, will create new cluster with default configuration.&quot;</span>,</span><br><span class="line">                                    instance.getClusterName(), instance.toJson());</span><br><span class="line">                    <span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cluster</span>(instance.getClusterName(), <span class="built_in">this</span>);</span><br><span class="line">                    cluster.init();</span><br><span class="line">                    getClusterMap().put(instance.getClusterName(), cluster);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                List&lt;Instance&gt; clusterIPs = ipMap.get(instance.getClusterName());</span><br><span class="line">                <span class="keyword">if</span> (clusterIPs == <span class="literal">null</span>) &#123;</span><br><span class="line">                    clusterIPs = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">                    ipMap.put(instance.getClusterName(), clusterIPs);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                clusterIPs.add(instance);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Loggers.SRV_LOG.error(<span class="string">&quot;[NACOS-DOM] failed to process ip: &quot;</span> + instance, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Instance&gt;&gt; entry : ipMap.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//make every ip mine</span></span><br><span class="line">            List&lt;Instance&gt; entryIPs = entry.getValue();</span><br><span class="line">            clusterMap.get(entry.getKey()).updateIps(entryIPs, ephemeral);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        setLastModifiedMillis(System.currentTimeMillis());</span><br><span class="line">        getPushService().serviceChanged(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Instance instance : allIPs()) &#123;</span><br><span class="line">            stringBuilder.append(instance.toIpAddr()).append(<span class="string">&quot;_&quot;</span>).append(instance.isHealthy()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Loggers.EVT_LOG.info(<span class="string">&quot;[IP-UPDATED] namespace: &#123;&#125;, service: &#123;&#125;, ips: &#123;&#125;&quot;</span>, getNamespaceId(), getName(),</span><br><span class="line">                stringBuilder.toString());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526005824980.png" alt="image-20230526005824980"></p><p><strong>总结：</strong></p><p>server向nacos发起注册请求，并维持一个心态检测的定时任务，nacos会通过阻塞队列异步地处理这些请求，并实时的通过UDP推送到client，为防止UDP数据丢失，client也会通过定时任务每隔10s向nacos发送拉取请求，当服务列表改变时，nacos再返回。</p>]]></content>
      
      
      <categories>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/post/3ad834c9.html"/>
      <url>/post/3ad834c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Zookeeper"><a href="#一、Zookeeper" class="headerlink" title="一、Zookeeper"></a>一、Zookeeper</h1><h2 id="1、什么是Zookeeper"><a href="#1、什么是Zookeeper" class="headerlink" title="1、什么是Zookeeper"></a>1、什么是Zookeeper</h2><p>Zookeeper是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程，Zookeeper通过其简单的架构和API解决了这个问题。Zookeeper能让开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。</p><h2 id="2、Zookeeper的应用场景"><a href="#2、Zookeeper的应用场景" class="headerlink" title="2、Zookeeper的应用场景"></a>2、Zookeeper的应用场景</h2><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526184456623.png" alt="image-20230526184456623"></p><p>在分布式系统中，需要有zookeeper作为分布式协调组件，协调分布系统中的状态</p><ul><li>分布式锁</li></ul><p>​zk在实现分布式锁上，可以做到强一致性，关于分布式锁，在ZAB协议中介绍</p><ul><li><p>无状态化的实现</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526184435267.png" alt="image-20230526184435267"></p></li></ul><h2 id="二、搭建Zookeeper服务器"><a href="#二、搭建Zookeeper服务器" class="headerlink" title="二、搭建Zookeeper服务器"></a>二、搭建Zookeeper服务器</h2><h3 id="1、zoo-conf配置文件说明"><a href="#1、zoo-conf配置文件说明" class="headerlink" title="1、zoo.conf配置文件说明"></a>1、zoo.conf配置文件说明</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zookeeper时间配置中的基本单位 (毫秒)</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># 允许follower初始化连接到leader最⼤时⻓，它表示tickTime时间倍数</span></span><br><span class="line"><span class="attr">即</span>:<span class="string">initLimit*tickTime</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 允许follower与leader数据同步最⼤时⻓,它表示tickTime时间倍数</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#zookeper 数据存储⽬录及⽇志保存⽬录（如果没有指明dataLogDir，则⽇志也保存在这个</span></span><br><span class="line"><span class="attr">⽂件中）</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/tmp/zookeeper</span></span><br><span class="line"><span class="comment">#对客户端提供的端⼝号</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment">#单个客户端与zookeeper最⼤并发连接数</span></span><br><span class="line"><span class="attr">maxClientCnxns</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 保存的数据快照数量，之外的将会被清除</span></span><br><span class="line"><span class="attr">autopurge.snapRetainCount</span>=<span class="string">3 #⾃动触发清除任务时间间隔，⼩时为单位。默认为0，表示不⾃动清除。</span></span><br><span class="line"><span class="attr">autopurge.purgeInterval</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><h3 id="2、Zookeeper服务器的操作命令"><a href="#2、Zookeeper服务器的操作命令" class="headerlink" title="2、Zookeeper服务器的操作命令"></a>2、Zookeeper服务器的操作命令</h3><p>重命名conf中的文件zoo_sample.cfg-&gt;zoo.conf</p><p>重庆zk服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh start ../conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>查看zk服务器的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh status ../conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>停止服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh stop ../conf/zoo.cfgs</span><br></pre></td></tr></table></figure><h2 id="三、Zookeeper内部的数据模型"><a href="#三、Zookeeper内部的数据模型" class="headerlink" title="三、Zookeeper内部的数据模型"></a>三、Zookeeper内部的数据模型</h2><h3 id="1、zk是如何保存数据的"><a href="#1、zk是如何保存数据的" class="headerlink" title="1、zk是如何保存数据的"></a>1、zk是如何保存数据的</h3><p>zk中的数据是保存在节点上，节点就是znode，多个znode之间构成一棵树的目录结构。</p><p>Zookeeper的数据模型是什么样子？类似于数据结构中的树，同时也很想文件系统的目录</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526163113874.png" alt="image-20230526163113874"></p><p>树是由节点所组成，Zookeeper的数据存储也同样是基于节点，这种节点叫做Znode，但是不同于树的节点，Znode的引用方式是路径引用，类似于文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/动物/猫</span><br><span class="line">/汽车/五菱</span><br></pre></td></tr></table></figure><p>这样的层级结构，让每一个Znode的节点拥有唯一的路径，就像命名空间一样对不同信息做出清晰的隔离。</p><h3 id="2、zk中的znode是什么样的数据结构"><a href="#2、zk中的znode是什么样的数据结构" class="headerlink" title="2、zk中的znode是什么样的数据结构"></a>2、zk中的znode是什么样的数据结构</h3><p>zk中的znode包含了四个部分</p><ul><li><p>data：保存数据</p></li><li><p>acl：权限</p><ul><li>c：create 创建权限，允许在该节点下创建子节点</li><li>w：write 更新权限，允许更新该节点的数据</li><li>r：read 读取权限，允许读取该节点的内容以及子节点的列表信息</li><li>d：delete 删除权限，允许删除该节点的子节点信息</li><li>a：admin 管理者权限，允许对该节点进行acl权限设置</li></ul></li><li><p>stat：描述当前咋znode的元数据</p></li><li><p>child：当前节点的子节点</p></li></ul><h3 id="3、zk中节点znode的类型"><a href="#3、zk中节点znode的类型" class="headerlink" title="3、zk中节点znode的类型"></a>3、zk中节点znode的类型</h3><ul><li>持久节点：创建出的节点，在会话结束后依然存在。保存数据</li><li>持久序号节点：创建出的节点，根据先后顺序，会在节点之后带上一个数值，越后执行数值越大，适用于分布式锁的应用场景-单调递增</li><li>临时节点：</li></ul><p>​临时节点是在会话结束后，自动删除的，通过这个特性，zk可以实现服务注册与发现的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526191303281.png" alt="image-20230526191303281"></p><ul><li><p>临时序号节点：跟持久序号节点相同，适用于临时的分布式锁</p></li><li><p>Container节点（3.5.3版本新增)：Container容器节点，当容器中没有任何子节点，该容器节点会被zk定期删除</p></li><li><p>TTL节点：可以指定节点的到期时间，到期后被zk定期删除。只能通过系统配置</p><p><span style="background:#eef0f4;">zookeeper.extendedTypeEnablee&#x3D;true</span>开启</p></li></ul><h3 id="4、zk的数据持久化"><a href="#4、zk的数据持久化" class="headerlink" title="4、zk的数据持久化"></a>4、zk的数据持久化</h3><p>zk的数据是运行在内存中，zk提供了两种持久化机制：</p><ul><li><strong>事务日志</strong></li></ul><p>​zk把执行的命令以日志形式保存在dataLogDir指定的路径中的文件中（如果没有指定dataLogDir，则按照dataDir指定的路径）。</p><ul><li><p><strong>数据快照</strong></p><p>zk会在一定的时间间隔内做一次内存数据快照，把该时刻的内存数据保存在快照文件中。</p></li></ul><p>zk通过两种形式的持久化，在恢复时线恢复文件中的数据到内存中，再用日志文件中的数据做增量恢复，这样恢复的速度更快。</p><h2 id="四、Zookeeper客户端（zkCli）的使用"><a href="#四、Zookeeper客户端（zkCli）的使用" class="headerlink" title="四、Zookeeper客户端（zkCli）的使用"></a>四、Zookeeper客户端（zkCli）的使用</h2><h3 id="1、多节点类型创建"><a href="#1、多节点类型创建" class="headerlink" title="1、多节点类型创建"></a>1、多节点类型创建</h3><ul><li><p>创建持久节点</p><p>create path [data] [acl]</p></li><li><p>创建持久序号节点</p><p>create -s path [data] [acl]</p></li><li><p>创建临时节点</p><p>create -e path [data] [acl]</p></li><li><p>创建临时需要节点</p><p>create -e -s path [data] [acl]</p></li><li><p>创建容器节点</p><p>create -c path [data] [acl]</p></li></ul><h3 id="2、查询节点"><a href="#2、查询节点" class="headerlink" title="2、查询节点"></a>2、查询节点</h3><ul><li><p>普通查询</p><ul><li><p>ls [-s -R] path</p><p>-s 详细信息</p><p>-R 当前目录和子目录中的所有信息</p></li></ul></li><li><p>查询节点相关信息</p><ul><li>cZid：创建节点的事务ID</li><li>mZid：修改节点的事务ID</li><li>pZid：添加或删除子节点的事务ID</li><li>ctime：节点创建的时间</li><li>mtime：节点最近修改的时间</li><li>dataVersion：节点内数据的版本，每更新一次数据，版本会+1</li><li>aclVersion：此节点的权限版本</li><li>ephemeralOwner：如果当前节点是临时节点，该值是当前节点所有者的session id。如果节点不是临时节点，则该值为零</li><li>dataLength：节点内数据的长度</li><li>numChildren：该节点的子节点个数</li></ul></li><li><p>查询节点的内容</p><ul><li><p>get [-s] path</p><p>-s 详细信息</p></li></ul></li></ul><h3 id="3、删除节点"><a href="#3、删除节点" class="headerlink" title="3、删除节点"></a>3、删除节点</h3><ul><li><p>普通删除</p></li><li><p>乐观锁删除</p><ul><li><p>delete [-v] path</p><p>-v 版本</p></li><li><p>deleteall path [-b batch size]</p></li></ul></li></ul><h3 id="4、权限设置"><a href="#4、权限设置" class="headerlink" title="4、权限设置"></a>4、权限设置</h3><ul><li><p>注册当前会话的账户和密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addauth digest xiaowang:123456</span><br></pre></td></tr></table></figure></li><li><p>创建节点并设置权限（指定该节点的用户，以及用户所拥有的权限）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /test-node abcd auth:xiaowang:123456:cdwra</span><br></pre></td></tr></table></figure></li><li><p>在另一个会话中必须先使用账户密码，才能拥有操作节点的权限</p></li></ul><h2 id="五、Curator客户端的使用"><a href="#五、Curator客户端的使用" class="headerlink" title="五、Curator客户端的使用"></a>五、Curator客户端的使用</h2><h3 id="1、Curator介绍"><a href="#1、Curator介绍" class="headerlink" title="1、Curator介绍"></a>1、Curator介绍</h3><p>Curator是Netflix公司开源的一套zookeeper客户端框架，Curator是对Zookeeper支持最好的客户端框架。Curator封装了大部分Zookeeper的功能，比如Leader选举、分布式锁等，减少了技术人员在使用Zookeeper时的底层细节开发工作。</p><h3 id="2、引入依赖"><a href="#2、引入依赖" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Curator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Zookeeper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">配置curator基本连接信息</span></span><br><span class="line"><span class="attr">curator.retryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">curator.elapsedTimeMs</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">curator.connectionString</span>=<span class="string">192.168.200.128:2181</span></span><br><span class="line"><span class="attr">curator.sessionTimeoutMs</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">curator.connectionTimeoutMs</span>=<span class="string">4000</span></span><br></pre></td></tr></table></figure><ul><li>注入配置Bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;curator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperZK</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> retryCount;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> elapsedTimeMs;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String connectionString;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> sessionTimeoutMs;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> connectionTimeoutMs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注入CuratorFramwork</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WrapperZK wrapperZK;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;start&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CuratorFramework <span class="title function_">curatorFramework</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CuratorFrameworkFactory.newClient(</span><br><span class="line">            wrapperZK.getConnectionString(),</span><br><span class="line">            wrapperZK.getSessionTimeoutMs(),</span><br><span class="line">            wrapperZK.getConnectionTimeoutMs(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RetryNTimes</span>(wrapperZK.getRetryCount(), wrapperZK.getElapsedTimeMs())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建节点"><a href="#3、创建节点" class="headerlink" title="3、创建节点"></a>3、创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createNode</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//添加默认(持久)节点</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> curatorFramework.create().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">    <span class="comment">//添加临时序号节点</span></span><br><span class="line">    <span class="comment">//String path2 = curatorFramework.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(&quot;/curator-nodes&quot;, &quot;messageDate&quot;.getBytes());</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;curator create node :%s  successfully!&quot;</span>, path));</span><br><span class="line">    <span class="comment">//System.in.read();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、获得节点数据"><a href="#4、获得节点数据" class="headerlink" title="4、获得节点数据"></a>4、获得节点数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//获取节点值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] bttes = curatorFramework.getData().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bttes = &quot;</span> + bttes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、修改节点数据"><a href="#5、修改节点数据" class="headerlink" title="5、修改节点数据"></a>5、修改节点数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//设置节点值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    curatorFramework.setData().forPath(<span class="string">&quot;/curator-node&quot;</span>, <span class="string">&quot;newMessage&quot;</span>.getBytes());</span><br><span class="line">    <span class="type">byte</span>[] bytes = curatorFramework.getData().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bytes = &quot;</span> + bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、创建节点同时创建父节点"><a href="#6、创建节点同时创建父节点" class="headerlink" title="6、创建节点同时创建父节点"></a>6、创建节点同时创建父节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建多级节点</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createWithParent</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pathWithParent</span> <span class="operator">=</span> <span class="string">&quot;/node-parent/sub-node-1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> curatorFramework.create().creatingParentContainersIfNeeded().forPath(pathWithParent);</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;curator create node :%s success!&quot;</span>, path));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、删除节点"><a href="#7、删除节点" class="headerlink" title="7、删除节点"></a>7、删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/node-parent&quot;</span>;</span><br><span class="line">    <span class="comment">//删除节点的同时一并删除子节点</span></span><br><span class="line">    curatorFramework.delete().guaranteed().deletingChildrenIfNeeded().forPath(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、zk实现分布式锁"><a href="#六、zk实现分布式锁" class="headerlink" title="六、zk实现分布式锁"></a>六、zk实现分布式锁</h2><h3 id="1、zk中锁的种类"><a href="#1、zk中锁的种类" class="headerlink" title="1、zk中锁的种类"></a>1、zk中锁的种类</h3><ul><li>读锁（共享锁）：大家都可以读。上锁前提：之前的锁没有写锁。</li><li>写锁（排他锁）：只有的到写锁的才能写。上锁前提：之前没有任何锁。</li></ul><h3 id="2、zk如何上读锁"><a href="#2、zk如何上读锁" class="headerlink" title="2、zk如何上读锁"></a>2、zk如何上读锁</h3><ul><li><p>创建一个临时序号节点，节点的数据是read，表示读锁</p></li><li><p>获取当前zk中序号比自己小的所有节点</p></li><li><p>判断最小节点是否是读锁</p><ul><li>如果不是读锁的话，则上锁失败，为最小节点设置监听。等待阻塞，zk的watch机制会当最小节点发送变化时通知当前节点，再执行第二步的流程。</li><li>如果是读锁的话则上锁成功。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526200419269.png" alt="image-20230526200419269"></p></li></ul><h3 id="3、zk如何上写锁"><a href="#3、zk如何上写锁" class="headerlink" title="3、zk如何上写锁"></a>3、zk如何上写锁</h3><ul><li>创建一个临时序号节点，节点的数据是write，表示写锁</li><li>获取zk中所有的子节点</li><li>判断自己是否是最小的节点：<ul><li>如果是，则上写锁成功</li><li>如果不是，说明前面还有锁，则上锁失败，监听最小节点，如果最小节点有变化，则再执行第二步。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526200644738.png" alt="image-20230526200644738"></p><h3 id="4、羊群效应"><a href="#4、羊群效应" class="headerlink" title="4、羊群效应"></a>4、羊群效应</h3><p>如果上述的上锁方式，只有节点发生变化，就会触及其他节点的监听事件，这样对zk的压力非常大，而羊群效应，可以调整成链式监听。解决这个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526200917177.png" alt="image-20230526200917177"></p><h3 id="5、Curator实现读写锁"><a href="#5、Curator实现读写锁" class="headerlink" title="5、Curator实现读写锁"></a>5、Curator实现读写锁</h3><ul><li>获取读锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetReadLock</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//读写锁</span></span><br><span class="line">    <span class="type">InterProcessReadWriteLock</span> <span class="variable">interProcessReadWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessReadWriteLock</span>(client, <span class="string">&quot;/lock1&quot;</span>);</span><br><span class="line">    <span class="comment">//获取读锁对象</span></span><br><span class="line">    <span class="type">InterProcessLock</span> <span class="variable">interProcessLock</span> <span class="operator">=</span> interProcessReadWriteLock.readLock();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待获取读锁对象中...&quot;</span>);</span><br><span class="line">    <span class="comment">//获取锁</span></span><br><span class="line">    interProcessLock.acquire();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i ++)&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    interProcessLock.release();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待释放锁...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取写锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetWriteLock</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//读写锁</span></span><br><span class="line">    <span class="type">InterProcessReadWriteLock</span> <span class="variable">interProcessReadWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessReadWriteLock</span>(client, <span class="string">&quot;/lock1&quot;</span>);</span><br><span class="line">    <span class="comment">//获取写锁对象</span></span><br><span class="line">    <span class="type">InterProcessLock</span> <span class="variable">interProcessLock</span> <span class="operator">=</span> interProcessReadWriteLock.writeLock();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待获取写锁对象中...&quot;</span>);</span><br><span class="line">    <span class="comment">//获取锁</span></span><br><span class="line">    interProcessLock.acquire();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i ++)&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    interProcessLock.release();</span><br><span class="line">    System.out.println(<span class="string">&quot;等待释放锁...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、zk的Watch机制"><a href="#七、zk的Watch机制" class="headerlink" title="七、zk的Watch机制"></a>七、zk的Watch机制</h1><h3 id="1、Watch机制介绍"><a href="#1、Watch机制介绍" class="headerlink" title="1、Watch机制介绍"></a>1、Watch机制介绍</h3><p>我们可以把Watch理解成是注册在特定Znode上的触发器。当这个Znode发生改变，也就是调用了<span style="background:#eef0f4;">create</span>，<span style="background:#eef0f4;">delete</span>，<span style="background:#eef0f4;">setData</span>方法的时候，将会触发Znode上注册的对应事件，请求Watch的客户端会收到异步通知。</p><p>具体交互过程如下：</p><ul><li>客户端调用<span style="background:#eef0f4;">getData</span>方法，<span style="background:#eef0f4;">watch</span>参数是<span style="background:#eef0f4;">true</span>。服务端接到请求，返回节点数据，并且在对应的哈希表里插入被Watch的Znode路径，以及Watcher列表。</li><li>当被Watch的Znode已删除，服务端会查找哈希表，找到该Znode对应的所有Watcher，异步通知客户端，并且删除哈希表中对应的key-value。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526201642163.png" alt="image-20230526201642163"></p><p>客户端使用了NIO通信模式监听服务端的调用。</p><h3 id="2、zkCli客户端使用Watch"><a href="#2、zkCli客户端使用Watch" class="headerlink" title="2、zkCli客户端使用Watch"></a>2、zkCli客户端使用Watch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create /test <span class="built_in">date</span></span><br><span class="line">get -w /test一次性监听节点</span><br><span class="line"><span class="built_in">ls</span> -w /test监听目录，创建和删除子节点会收到通知。但是子节点中新增节点不会被监听到</span><br><span class="line"><span class="built_in">ls</span> -R -w /test监听子节点中节点的变化，但内容的变化不会收到通知</span><br></pre></td></tr></table></figure><h3 id="3、Curator客户端使用Watch"><a href="#3、Curator客户端使用Watch" class="headerlink" title="3、Curator客户端使用Watch"></a>3、Curator客户端使用Watch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNodeListener</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">NodeCache</span> <span class="variable">nodeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeCache</span>(curatorFramework,<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">    nodeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">NodeCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125; path nodeChanged: &quot;</span>, <span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">            printNodeData();</span><br><span class="line">        &#125;</span><br><span class="line">    )&#125;;</span><br><span class="line">    nodeCache.start();</span><br><span class="line">    <span class="comment">//System.in.read();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printNodeData</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = curatorFramework.getData().forPath(<span class="string">&quot;/curator-node&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;data: &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、Zookeeper集群实战"><a href="#八、Zookeeper集群实战" class="headerlink" title="八、Zookeeper集群实战"></a>八、Zookeeper集群实战</h2><h3 id="1、Zookeeper集群角色"><a href="#1、Zookeeper集群角色" class="headerlink" title="1、Zookeeper集群角色"></a>1、Zookeeper集群角色</h3><p>Zookeeper集群中的节点有三种角色</p><ul><li>Leader：处理集群的所有事务请求，集群中只有一个Leader</li><li>Follower：只能处理读请求，参与Leader选举</li><li>Observer：只能处理读请求，提升集群读的性能，但不能参与Leader选举</li></ul><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526202218042.png" alt="image-20230526202218042"> </p><h3 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h3><p>搭建4个节点，其中一个节点为Observer</p><ul><li><p><strong>创建4个节点的myid,并设值</strong></p><p>在&#x2F;us r&#x2F;local&#x2F;zookeeper中创建一下四个文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/zkdata/zk1<span class="comment"># echo 1 &gt; myid</span></span><br><span class="line">/usr/local/zookeeper/zkdata/zk2<span class="comment"># echo 2 &gt; myid</span></span><br><span class="line">/usr/local/zookeeper/zkdata/zk3<span class="comment"># echo 3 &gt; myid</span></span><br><span class="line">/usr/local/zookeeper/zkdata/zk4<span class="comment"># echo 4 &gt; myid</span></span><br></pre></td></tr></table></figure><ul><li><strong>编写4个zoo.cfg</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes. 修改对应的zk1 zk2 zk3 zk4</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/local/zookeeper/zkdata/zk1</span></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#2001为集群通信端口，3001为集群选举端口，observer（观察者身份）</span></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">192.168.200.128:2001:3001</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">192.169.200.128:2002:3002</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">192.168.200.128:2003:3003</span></span><br><span class="line"><span class="attr">server.4</span>=<span class="string">192.168.200.128:2004:3004:observer</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>启动4台Zookeeper</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh status ./conf/zoo1.cfg</span><br><span class="line">./bin/zkServer.sh status ./conf/zoo2.cfg</span><br><span class="line">./bin/zkServer.sh status ./conf/zoo3.cfg</span><br><span class="line">./bin/zkServer.sh status ./conf/zoo4.cfg</span><br></pre></td></tr></table></figure><h3 id="3、连接Zookeeper集群"><a href="#3、连接Zookeeper集群" class="headerlink" title="3、连接Zookeeper集群"></a>3、连接Zookeeper集群</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkCli.sh -server <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span>:<span class="number">2181</span>,<span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span>:<span class="number">2182</span>,<span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span>:<span class="number">2183</span></span><br></pre></td></tr></table></figure><h2 id="九、ZAB协议"><a href="#九、ZAB协议" class="headerlink" title="九、ZAB协议"></a>九、ZAB协议</h2><h3 id="1、什么是ZAB协议"><a href="#1、什么是ZAB协议" class="headerlink" title="1、什么是ZAB协议"></a>1、什么是ZAB协议</h3><p>zookeeper作为非常重要的分布式协调组件，需要进行集群部署，集群中会以一主多从的形式进行部署。</p><p>zookeeper为了保证数据的一致性，使用了ZAB（Zookeeper Atomic Broadcast）协议，这个协议解决了Zookeeper的崩溃和主从数据同步的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526203139995.png" alt="image-20230526203139995"></p><h3 id="2、ZAB协议定义的四种节点状态"><a href="#2、ZAB协议定义的四种节点状态" class="headerlink" title="2、ZAB协议定义的四种节点状态"></a>2、ZAB协议定义的四种节点状态</h3><ul><li>Looking：选举状态</li><li>Following：Following节点（从节点）所处的状态</li><li>Leading：Leader节点（主节点）所处的状态</li><li>Observing：观察者节点所处的状态</li></ul><h3 id="3、集群上线Leader选举过程"><a href="#3、集群上线Leader选举过程" class="headerlink" title="3、集群上线Leader选举过程"></a>3、集群上线Leader选举过程</h3><p>Zookeeper集群中的节点在上线时，将会进入到Looking状态，也就是Leader的状态</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526203448400.png" alt="image-20230526203448400"></p><h3 id="4、崩溃恢复时的Leader选举"><a href="#4、崩溃恢复时的Leader选举" class="headerlink" title="4、崩溃恢复时的Leader选举"></a>4、崩溃恢复时的Leader选举</h3><p>Leader建立完后，Leader周期性地不断向Follower发送心跳（ping命令，没有内容的socket）。当Leader崩溃后，Follower发现socket通道已关闭，于是Follower开始进入到Looking状态，重新回到Leader选举状态，此时集群不能对外提供服务。</p><h3 id="5、注册服务器之间的数据同步"><a href="#5、注册服务器之间的数据同步" class="headerlink" title="5、注册服务器之间的数据同步"></a>5、注册服务器之间的数据同步</h3><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526182148611.png" alt="image-20230526182148611"></p><h3 id="6、Zookeeper中的NIO与BIO的应用"><a href="#6、Zookeeper中的NIO与BIO的应用" class="headerlink" title="6、Zookeeper中的NIO与BIO的应用"></a>6、Zookeeper中的NIO与BIO的应用</h3><ul><li>NIO<ul><li>用于被客户端连接的2181端口，使用的是NIO模式与客户端建立连接</li><li>客户端开启Watch时，也使用NIO，等待Zookeeper服务器的回调</li></ul></li><li>BIO<ul><li>集群在选举时，多个节点之间的投票通信端口，使用BIO进行通信</li></ul></li></ul><h2 id="十、CAP理论"><a href="#十、CAP理论" class="headerlink" title="十、CAP理论"></a>十、CAP理论</h2><p>2000年7月，加州大学伯克利分校的 Eric Brewer教授在ACM PODC会议上提出CAP猜想。2年后，麻省理工学院的Seth Gilbert和 Nancy Lynch 从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认定理。</p><h3 id="1、CAP理论"><a href="#1、CAP理论" class="headerlink" title="1、CAP理论"></a>1、CAP理论</h3><p>CAP理论为：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><ul><li>一致性（Consistency）</li></ul><p>一致性指”all nodespsee the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。</p><p>一致性分为强一致性、弱一致性和最终一致性。</p><ol><li>强一致性：当更新操作完成之后，任何多个后续进程或者线程的访问都会**返回最新的更新过的值，直到这个数据被其他数据更新为止</li><li>弱一致性： 系统并不保证进程或者线程的访问都会返回最新更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。甚至不能保证可以访问到。</li><li>最终一致性： 最终一致性也是弱一致性的一种，它无法保证数据更新后，所有后续的访问都能看到最新数值，而是需要一个时间，在这个时间之后可以保证这一点（就是在一段时间后，节点间的数据会最终达到一致状态），而在这个时间内，数据也许是不一致的，这个系统无法保证强一致性的时间片段被称为「不一致窗口」。不一致窗口的时间长短取决于很多因素，比如备份数据的个数、网络传输延迟速度、系统负载等。</li></ol><ul><li>可用性（Availability）</li></ul><p>可用性指”Reads and writes always success”，即服务一直可用，而且是正常响应时间。</p><p>好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。</p><ul><li>分区容错性（Partition tolerance）</li></ul><p>分区容错性指”the system continues to operate despite arbitrary message loss or failure of part of the system”,即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。一一避免单点故障，就要进行冗余部署，冗余部署相当于是服务的分区，这样的分区就具备了容错性。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230526231652154.png" alt="image-20230526231652154"></p><h3 id="2、CAP权衡"><a href="#2、CAP权衡" class="headerlink" title="2、CAP权衡"></a>2、CAP权衡</h3><p>通过CAP理论，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？</p><p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，社区C(退而求其次保证最终一致性)。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。</p><p>对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。</p><p>还有一种是保证CP，舍弃A。例如网络故障是只读不写。孰优孰略，没有定论，只有根据场景定夺，适合的才是最好的。</p><h3 id="3、BASE理论"><a href="#3、BASE理论" class="headerlink" title="3、BASE理论"></a>3、BASE理论</h3><p>eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性《Strong Consistency，CAP的一致性就是强一致性)，但应用可以采用适合的方式达到最终一致性(Eventual Consitency) 。</p><ul><li><p>基本可用性（Basiclly Available）</p><p>基本可用是指分布式系统在出现故障的时候，运行损失部分可用性，即保证核心可用</p><p>电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层面也可能只提供降级服务。这就是损失部分可用性的体现。</p></li><li><p>软状态（Soft State）</p><p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</p></li><li><p>最终一致性（Eventual Consistency）</p><p>最终一致性是指系统中的所有数据副本经过一定时间后，最终达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p></li></ul><h3 id="4、Zookeeper追求的一致性"><a href="#4、Zookeeper追求的一致性" class="headerlink" title="4、Zookeeper追求的一致性"></a>4、Zookeeper追求的一致性</h3><p>Zookeeper在数据同步时，追求的并不是强一致性，而是顺序一致性（事务id的单调递增）。</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activiti7进阶</title>
      <link href="/post/183eef01.html"/>
      <url>/post/183eef01.html</url>
      
        <content type="html"><![CDATA[<h1 id="Activiti7进阶"><a href="#Activiti7进阶" class="headerlink" title="Activiti7进阶"></a>Activiti7进阶</h1><h2 id="一-流程实例"><a href="#一-流程实例" class="headerlink" title="一.流程实例"></a>一.流程实例</h2><p><strong>流程实例</strong>（</p><p>ProcessInstance）代表流程定义的执行实例。</p><p>一个流程实例包括了所有的运行节点。我们可以利用这个对象来了解当前流程实例的进度等信息。</p><p>例如：用户或程序按照流程定义内容发起一个流程，这就是一个流程实例。</p><p>流程定义和流程实例的图解：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523212659883.png" alt="image-20230523212659883"></p><p><strong>启动流程实例 并添加Businesskey（业务标识</strong>）</p><p>流程定义部署在activiti后，就可以在系统中通过activiti去管理该流程的执行，执行流程表示流程的一次执行。</p><p>比如部署系统出差流程后，如果某用户要申请出差这时就需要执行这个流程，如果另外一个用户也要申请出差则也需要执行该流程，每个执行互不影响，每个执行是单独的流程实例。</p><p>启动流程实例时，指定的businesskey，就会在act_ru_execution #流程实例的执行表中存储businesskey。 </p><p>Businesskey：业务标识，通常为业务表的主键，业务标识和流程实例一一对应。业务标识来源于业务系统。存储业务标识就是根据业务标识来关联查询业务系统的数据。</p><p>比如：出差流程启动一个流程实例，就可以将出差单的id作为业务标识存储到activiti中，将来查询activiti的流程实例信息就可以获取出差单的id从而关联查询业务系统数据库得到出差单信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例，添加businessKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBusinessKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 得到processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 得到runtimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        <span class="comment">// 启动流程实例，同时还要指定业务标识businessKey，也就是出差申请单id，这里是1001</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(<span class="string">&quot;myEvection&quot;</span>, <span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出processInstance相关属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;业务id = &quot;</span> + processInstance.getBusinessKey());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Activiti的act_ru_execution中存储业务标识：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214445683.png" alt="image-20230523214445683"></p><p><strong>操作数据库表</strong></p><p>启动流程实例，操作如下数据库表：</p><p>SELECT * FROM act_ru_execution #流程实例执行表，记录当前流程实例的执行情况</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214520033.png" alt="image-20230523214520033"></p><p>说明：</p><p>流程实例执行，如果当前只有一个分支时，一个流程实例只有一条记录且执行表的主键id和流程实例id相同，如果当前有多个分支正在运行则该执行表中有多条记录，存在执行表的主键和流程实例id不相同的记录。<strong>不论当前有几个分支总会有一条记录的执行表的主键和流程实例</strong>id<strong>相同</strong></p><p>一个流程实例运行完成，此表中与流程实例相关的记录删除。</p><p>SELECT * FROM act_ru_task #任务执行表，记录当前执行的任务</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214607802.png" alt="image-20230523214607802"></p><p>说明：启动流程实例，流程当前执行到第一个任务结点，此表会插入一条记录表示当前任务的执行情况，如果任务完成则记录删除。</p><p>SELECT * FROM act_ru_identitylink #任务参与者，记录当前参与任务的用户或组</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214654630.png" alt="image-20230523214654630"></p><p>SELECT * FROM act_hi_procinst #流程实例历史表</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214731026.png" alt="image-20230523214731026"></p><p>流程实例启动，会在此表插入一条记录，流程实例运行完成记录也不会删除。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214832196.png" alt="image-20230523214832196"></p><p>开始一个任务，不仅在act_ru_task表插入记录，也会在历史任务表插入一条记录，任务历史表的主键就是任务id，任务完成此表记录不删除。</p><p>SELECT * FROM act_hi_actinst #活动历史表，记录所有活动</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523214935396.png" alt="image-20230523214935396"></p><p>活动包括任务，所以此表中不仅记录了任务，还记录了流程执行过程的其它活动，比如开始事件、结束事件。</p><p><strong>查询流程实例</strong></p><p>流程在运行过程中可以查询流程实例的状态，当前运行结点等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryProcessInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 流程定义key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processDefinitionKey</span> <span class="operator">=</span> <span class="string">&quot;evection&quot;</span>;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取RuntimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        List&lt;ProcessInstance&gt; list = runtimeService.createProcessInstanceQuery()</span><br><span class="line">                .processDefinitionKey(processDefinitionKey)</span><br><span class="line">                .list();</span><br><span class="line">        <span class="keyword">for</span> (ProcessInstance processInstance : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程实例id = &quot;</span> + processInstance.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;所属流程定义id = &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class="line">            System.out.println(<span class="string">&quot;是否执行完成 = &quot;</span> + processInstance.isEnded());</span><br><span class="line">            System.out.println(<span class="string">&quot;是否暂停 = &quot;</span> + processInstance.isSuspended());</span><br><span class="line">            System.out.println(<span class="string">&quot;当前活动标识 = &quot;</span> + processInstance.getActivityId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>关联BusinessKey</strong></p><p>需求：</p><p>在activiti实际应用时，查询流程实例列表时可能要显示出业务系统的一些相关信息，比如：查询当前运行的出差流程列表需要将出差单名称、出差天数等信息显示出来，出差天数等信息在业务系统中存在，而并没有在activiti数据库中存在，所以是无法通过activiti的api查询到出差天数等信息。</p><p>实现：</p><p>在查询流程实例时，通过businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。</p><p>通过下面的代码就可以获取activiti中所对应实例保存的业务Key。而这个业务Key一般都会保存相关联的业务操作表的主键，再通过主键ID去查询业务信息，比如通过出差单的ID，去查询更多的请假信息（出差人，出差时间，出差天数，出差目的地等）</p><p>processInstance.getBusinessKey();</p><p>在activiti的act_ru_execution表，字段BUSINESS_KEY就是存放业务KEY的。</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523224944513.png" alt="image-20230523224944513"></p><p><strong>挂起、激活流程实例</strong></p><p>某些情况可能由于流程变更需要将当前运行的流程暂停而不是直接删除，流程暂停后将不会继续执行。</p><p><strong>全部流程实例挂起</strong></p><p>操作流程定义为挂起状态，该流程定义下边所有的流程实例全部暂停：</p><p>流程定义为挂起状态该流程定义将不允许启动新的流程实例，同时该流程定义下所有的流程实例将全部挂起暂停执</p><p>行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全部流程实例挂起与暂停</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suspendAllProcessInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取repositoryService</span></span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 查询流程定义的对象</span></span><br><span class="line">        <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvenction&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 得到当前流程定义的实例是否都是暂停状态</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">suspended</span> <span class="operator">=</span> processDefinition.isSuspended();</span><br><span class="line">        <span class="comment">// 流程定义id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processDefinitionId</span> <span class="operator">=</span> processDefinition.getId();</span><br><span class="line">        <span class="comment">// 判断是否为暂停</span></span><br><span class="line">        <span class="keyword">if</span> (suspended) &#123;</span><br><span class="line">            <span class="comment">// 如果是暂停，可以执行激活操作，参数1:流程定义id，参数2:是否激活，参数3：激活时间</span></span><br><span class="line">            repositoryService.activateProcessDefinitionById(processDefinitionId,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已激活&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是激活状态，可以暂停，参数1:流程定义id，参数2:是否暂停，参数3:暂停时间</span></span><br><span class="line">            repositoryService.suspendProcessDefinitionById(processDefinitionId,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已挂起&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>单个流程实例挂起</strong></p><p>操作流程实例对象，针对单个流程执行挂起操作，某个流程实例挂起则此流程不再继续执行，完成该流程实例的当前任务将报异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个流程实例挂起与激活</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suspendSingleProcessInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// runtimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        <span class="comment">// 查询定义流程对象</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.createProcessInstanceQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 得到当前流程定义的实例是否都为暂停状态</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">suspended</span> <span class="operator">=</span> processInstance.isSuspended();</span><br><span class="line">        <span class="comment">// 流程定义id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processDefinitionId</span> <span class="operator">=</span> processInstance.getId();</span><br><span class="line">        <span class="comment">// 判断是否为暂停</span></span><br><span class="line">        <span class="keyword">if</span> (suspended) &#123;</span><br><span class="line">            <span class="comment">// 如果是暂停，可以执行激活操作，参数：流程定义id</span></span><br><span class="line">            runtimeService.activateProcessInstanceById(processDefinitionId);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已挂起&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是激活状态，可以暂停，参数：流程定义id</span></span><br><span class="line">            runtimeService.suspendProcessInstanceById(processDefinitionId);</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义：&quot;</span>+processDefinitionId+<span class="string">&quot;,已挂起&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试完成个人任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeSingleTask</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取操作任务的服务 TaskService</span></span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="comment">// 完成任务，参数：流程实例id，完成zhangsan的任务</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id = &quot;</span> + task.getProcessInstanceId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务id = &quot;</span> + task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务负责人 = &quot;</span> + task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名称 = &quot;</span> + task.getName());</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二-个人任务"><a href="#二-个人任务" class="headerlink" title="二.个人任务"></a>二.个人任务</h2><h3 id="2-1、分配任务负责人"><a href="#2-1、分配任务负责人" class="headerlink" title="2.1、分配任务负责人"></a>2.1、分配任务负责人</h3><h4 id="2-1-1、固定分配"><a href="#2-1-1、固定分配" class="headerlink" title="2.1.1、固定分配"></a>2.1.1、固定分配</h4><p>在进行业务流程建模时指定固定的任务负责人，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523232327220.png" alt="image-20230523232327220"></p><p>并在properties试图中，填写Assignee项为任务负责人。</p><h4 id="2-1-2、表达式分配"><a href="#2-1-2、表达式分配" class="headerlink" title="2.1.2、表达式分配"></a>2.1.2、表达式分配</h4><p>由于固定分配方式，任务只管一步一步执行任务，执行到每一个任务将按照 bpmn 的配置去分配任 务负责人。</p><h5 id="2-1-2-1、UEL表达式"><a href="#2-1-2-1、UEL表达式" class="headerlink" title="2.1.2.1、UEL表达式"></a>2.1.2.1、<strong>UEL表达式</strong></h5><p>Activiti 使用 UEL 表达式， UEL 是 java EE6 规范的一部分， UEL（Unified Expression Language）即 统一表达式语言，activiti 支持两个 UEL 表达式： UEL-value 和 UEL-method。 </p><p>1)UEL-value定义</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523233342061.png" alt="image-20230523233342061"></p><p>assignee这个变量是activiti的一个流程变量，</p><p>或者使用这种方式定义：</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523233706248.png" alt="image-20230523233706248"></p><p>user 也是 activiti 的一个流程变量， user.assignee 表示通过调用 user 的 getter 方法获取值。</p><p>2)UEL-method方式</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523232937447.png" alt="image-20230523232937447"></p><p>UserBean是Spring容器中的一个Bean，表示调用该Bean的getUserId()方法。</p><p>3）UEL-method与UEL-value结合</p><p>再比如： ${ldapService.findManagerForEmployee(emp)} ldapService 是 spring 容器的一个 bean， </p><p>findManagerForEmployee 是该 bean 的一个方法，emp 是 activiti 流程变量， emp 作为参数传到</p><p>ldapService.findManagerForEmployee 方法中。</p><p>4）其他</p><p>表达式支持解析基础类型、 bean、 list、 array 和 map，也可作为条件判断。 如下： </p><p>${order.price &gt; 100 &amp;&amp; order.price &lt; 250}</p><h5 id="2-1-2-2、编写代码配置负责人"><a href="#2-1-2-2、编写代码配置负责人" class="headerlink" title="2.1.2.2、编写代码配置负责人"></a>2.1.2.2、编写代码配置负责人</h5><p>1）定义任务分配流程变量</p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523233424469.png" alt="image-20230523233424469"></p><p>2)设置流程变量</p><p>在启动流程实例时设置流程变量，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置流程负责人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assgineeUEL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取流程引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取runtimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        <span class="comment">// 设置assginee的值，用户可以在界面上设置流程的执行</span></span><br><span class="line">        HashMap&lt;String, Object&gt; assgineeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        assgineeMap.put(<span class="string">&quot;assginee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        assgineeMap.put(<span class="string">&quot;assginee1&quot;</span>,<span class="string">&quot;李经理&quot;</span>);</span><br><span class="line">        assgineeMap.put(<span class="string">&quot;assginee2&quot;</span>,<span class="string">&quot;王总经理&quot;</span>);</span><br><span class="line">        assgineeMap.put(<span class="string">&quot;assginee3&quot;</span>,<span class="string">&quot;赵财务&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动流程实例，同时还要设置流程定义的assginee的值</span></span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;myEvection&quot;</span>,assgineeMap);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(processEngine.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行成功后，在act_ru_variable表中看到刚才map中的数据</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523234304467.png" alt="image-20230523234304467"></p><h5 id="2-1-2-3、注意事项"><a href="#2-1-2-3、注意事项" class="headerlink" title="2.1.2.3、注意事项"></a>2.1.2.3、注意事项</h5><p>由于使用了表达式分配，必须保证在任务执行过程表达式执行成功，比如： </p><p>某个任务使用了表达式${order.price &gt; 100 &amp;&amp; order.price &lt; 250}，当执行该任务时必须保证 order 在 流程变量中存在，否则 activiti 异常。</p><h3 id="2-1-3、监听器分配"><a href="#2-1-3、监听器分配" class="headerlink" title="2.1.3、监听器分配"></a>2.1.3、监听器分配</h3><p>可以使用监听器来完成很多Activiti流程的业务。</p><p>在本章我们使用监听器的方式来指定负责人，那么在流程设计时就不需要指定assignee。</p><p>任务监听器是发生对应的任务相关事件时执行自定义 java 逻辑 或表达式。 任务相当事件包括：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230524011649214.png" alt="image-20230524011649214"></p><p>Event的选项包含：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Create：任务创建后触发</span> </span><br><span class="line"><span class="string">Assignment：任务分配后触发</span> </span><br><span class="line"><span class="string">Delete：任务完成后触发</span> </span><br><span class="line"><span class="string">All：所有事件发生都触发</span></span><br></pre></td></tr></table></figure><p>定义任务监听类，且类必须实现 org.activiti.engine.delegate.TaskListener 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskListener</span> <span class="keyword">implements</span> <span class="title class_">TaskListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(DelegateTask delegateTask)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delegateTask.getName().equals(<span class="string">&quot;创建出差申请&quot;</span>) &amp;&amp; delegateTask.getEventName().equals(<span class="string">&quot;create&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 指定任务负责人</span></span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DelegateTask对象的内容如下</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230524011347816.png" alt="image-20230524011347816"></p><h5 id="2-1-3-1、注意事项"><a href="#2-1-3-1、注意事项" class="headerlink" title="2.1.3.1、注意事项"></a>2.1.3.1、注意事项</h5><p>使用监听器分配方式，按照监听事件去执行监听类的 notify 方法，方法如果不能正常执行也会影响 任务的执行。</p><h2 id="2-2、查询任务"><a href="#2-2、查询任务" class="headerlink" title="2.2、查询任务"></a>2.2、查询任务</h2><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 查询个人当前待执行的任务</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void findPersonalTaskList()&#123;</span><br><span class="line">        // 流程定义key</span><br><span class="line">        String processDefinitionKey = &quot;demo&quot;;</span><br><span class="line">        // 任务负责人</span><br><span class="line">        String assignee = &quot;张三&quot;;</span><br><span class="line">        // 获取TaskService</span><br><span class="line"></span><br><span class="line">        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        TaskService taskService = processEngine.getTaskService();</span><br><span class="line">        List&lt;Task&gt; taskList = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(processDefinitionKey)</span><br><span class="line">                .includeProcessVariables()</span><br><span class="line">                .taskAssignee(assignee)</span><br><span class="line">                .list();</span><br><span class="line">        for (Task task : taskList) &#123;</span><br><span class="line">            System.out.println(&quot;---------------------------------------&quot;);</span><br><span class="line">            System.out.println(&quot;流程实例id = &quot; + task.getProcessInstanceId());</span><br><span class="line">            System.out.println(&quot;任务id = &quot; + task.getId());</span><br><span class="line">            System.out.println(&quot;任务负责人 = &quot; + task.getAssignee());</span><br><span class="line">            System.out.println(&quot;任务名称 = &quot; + task.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>关联businessKey</strong></p><p>需求：在 activiti 实际应用时，查询待办任务可能要显示出业务系统的一些相关信息。</p><p>比如：查询待审批出差任务列表需要将出差单的日期、 出差天数等信息显示出来。</p><p>出差天数等信息在业务系统中存在，而并没有在 activiti 数据库中存在，所以是无法通过 activiti 的 api 查询到出差天数等信息。 实现： 在查询待办任务时，通过 businessKey（业务标识 ）关联查询业务系统的出差单表，查询出出差天数等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment">     * businessKey</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findProcessInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取taskService</span></span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="comment">// 获取runtimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        <span class="comment">// 查询流程定义的对象</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 使用task对象获取实例id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processInstanceId</span> <span class="operator">=</span> task.getProcessInstanceId();</span><br><span class="line">        <span class="comment">// 使用实例id，获取流程实例对象</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.createProcessInstanceQuery()</span><br><span class="line">                .processInstanceId(processInstanceId)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 使用processInstance，得到businessKey</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">businessKey</span> <span class="operator">=</span> processInstance.getBusinessKey();</span><br><span class="line">        System.out.println(<span class="string">&quot;businessKey = &quot;</span> + businessKey);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、办理业务"><a href="#2-3、办理业务" class="headerlink" title="2.3、办理业务"></a>2.3、办理业务</h2><p>注意：在实际应用中，完成任务需要校验任务的负责人是否具有该任务的办理权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务，判断当前用户是否有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 任务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">taskId</span> <span class="operator">=</span> <span class="string">&quot;20001&quot;</span>;</span><br><span class="line">        <span class="comment">// 任务负责人</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">assignee</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 创建taskService</span></span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="comment">// 完成任务前，需要校验该任务负责人可以完成当前任务</span></span><br><span class="line">        <span class="comment">// 校验方法</span></span><br><span class="line">        <span class="comment">// 根据任务id和任务负责人查询当前任务，如果查询到该用户权限，就完成</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .taskAssignee(assignee)</span><br><span class="line">                .taskId(taskId)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="literal">null</span>) &#123;</span><br><span class="line">            taskService.complete(taskId);</span><br><span class="line">            System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activiti7入门</title>
      <link href="/post/2252f2c6.html"/>
      <url>/post/2252f2c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Activiti7工作流引擎"><a href="#Activiti7工作流引擎" class="headerlink" title="Activiti7工作流引擎"></a>Activiti7工作流引擎</h1><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一.准备工作"></a>一.准备工作</h2><h3 id="1-1创建一个activiti的maven工程"><a href="#1-1创建一个activiti的maven工程" class="headerlink" title="1.1创建一个activiti的maven工程"></a>1.1创建一个activiti的maven工程</h3><h3 id="1-2-idea下载插件"><a href="#1-2-idea下载插件" class="headerlink" title="1.2.idea下载插件"></a>1.2.idea下载插件</h3><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230522214653828.png" alt="image-20230522214653828"></p><h3 id="1-3-pom-xml配置"><a href="#1-3-pom-xml配置" class="headerlink" title="1.3.pom.xml配置"></a>1.3.pom.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.dependencies<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bpmn 模型处理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bpmn 转换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; bpmn json数据转换 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bpmn 布局 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- activiti 云支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud.dependencies<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0.M6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-添加log4j-porperties日志配置"><a href="#1-4-添加log4j-porperties日志配置" class="headerlink" title="1.4.添加log4j.porperties日志配置"></a>1.4.添加log4j.porperties日志配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment"># log4j.rootCategory=INFO, CONSOLE debug info warn error fatal</span></span><br><span class="line"><span class="attr">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.File</span>=<span class="string">\Users\zhengcan\act\activiti.log</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r[%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure><h3 id="1-5-添加activiti-cfg-xml配置文件"><a href="#1-5-添加activiti-cfg-xml配置文件" class="headerlink" title="1.5.添加activiti.cfg.xml配置文件"></a>1.5.添加activiti.cfg.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/contex</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里可以使用 链接池 dbcp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用数据源 上面已经设置好了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- activiti数据库表处理策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-java类编写程序生成表"><a href="#1-6-java类编写程序生成表" class="headerlink" title="1.6.java类编写程序生成表"></a>1.6.java类编写程序生成表</h3><p>创建一个测试类，调用activiti工具类，生成activiti需要的数据库表</p><p>直接使用activiti提供的工具类ProcessEngines，会默认读取classPath下的activiti.cgf.xml文件，读取其中的数据库配置，创建ProcessEngine，在创建ProcessEngine时会自动创建表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testProcess1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过默认方式创建</span></span><br><span class="line">       <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">       System.out.println(processEngine);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建流程引擎配置文件</span></span><br><span class="line">       <span class="comment">// ProcessEngineConfiguration engineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;);</span></span><br><span class="line">       <span class="comment">// 通过配置文件，创建流程</span></span><br><span class="line">       <span class="comment">// ProcessEngine processEngine = engineConfiguration.buildProcessEngine();</span></span><br><span class="line">       <span class="comment">// System.out.println(processEngine);</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>： </p><p>1、运行以上程序段即可完成 activiti 表创建，通过改变 activiti.cfg.xml 中databaseSchemaUpdate 参数的值执行</p><p>不同的数据表处理策略。 2 、 上 边 的 方法 getDefaultProcessEngine方法在执行时，从activiti.cfg.xml 中找固定的名称</p><p>processEngineConfiguration 。</p><p>在测试程序执行过程中，idea的控制台会输出日志，说明程序正在创建数据表，类似如下,注意红线内容：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230522232638958.png" alt="image-20230522232638958"></p><p>执行完之后我们就创建了25张表：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230522232744228.png" alt="image-20230522232744228"></p><p>到这，我们就完成activiti运行需要的数据库和表的创建。</p><h2 id="二-表结构说明"><a href="#二-表结构说明" class="headerlink" title="二.表结构说明"></a>二.表结构说明</h2><h3 id="2-1-表的命名规则和作用"><a href="#2-1-表的命名规则和作用" class="headerlink" title="2.1 表的命名规则和作用"></a>2.1 表的命名规则和作用</h3><p>看到刚才创建的表，我们发现Activiti 的表都以 ACT_ 开头。</p><p>第二部分是表示表的用途的两个字母标识。 用途也和服务的 API 对应。 <strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。 <strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。 <strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，历史流程实例， 变量，任务等等。 <strong>ACT_GE</strong> ： GE 表示 general。 通用数据， 用于不同场景下</p><h3 id="2-2-Activiti数据表介绍"><a href="#2-2-Activiti数据表介绍" class="headerlink" title="2.2 Activiti数据表介绍"></a>2.2 Activiti数据表介绍</h3><table><thead><tr><th>表分类</th><th>表名</th><th>解释</th></tr></thead><tbody><tr><td>一般数据</td><td></td><td></td></tr><tr><td></td><td>[ACT_GE_BYTEARRAY]</td><td>通用的流程定义和流程资源</td></tr><tr><td></td><td>[ACT_GE_PROPERTY]</td><td>系统相关属性</td></tr><tr><td></td><td>[ACT_HI_ACTINST]</td><td>历史的流程实例</td></tr><tr><td></td><td>[ACT_HI_ATTACHMENT]</td><td>历史的流程附件</td></tr><tr><td></td><td>[ACT_HI_COMMENT]</td><td>历史的说明性信息</td></tr><tr><td></td><td>[ACT_HI_DETAIL]</td><td>历史的流程运行中的细节信息</td></tr><tr><td></td><td>[ACT_HI_IDENTITYLINK]</td><td>历史的流程运行过程中用户关系</td></tr><tr><td>流程历史记录</td><td></td><td></td></tr><tr><td></td><td>[ACT_HI_PROCINST]</td><td>历史的流程实例</td></tr><tr><td></td><td>[ACT_HI_TASKINST]</td><td>历史的任务实例</td></tr><tr><td></td><td>[ACT_HI_VARINST]</td><td>历史的流程运行中的变量信息</td></tr><tr><td>流程定义表</td><td></td><td></td></tr><tr><td></td><td>[ACT_RE_DEPLOYMENT]</td><td>部署单元信息</td></tr><tr><td></td><td>[ACT_RE_MODEL]</td><td>模型信息</td></tr><tr><td></td><td>[ACT_RE_PROCDEF]</td><td>已部署的流程定义</td></tr><tr><td>运行实例表</td><td></td><td></td></tr><tr><td></td><td>[ACT_RU_EVENT_SUBSCR]</td><td>运行时事件</td></tr><tr><td></td><td>[ACT_RU_EXECUTION]</td><td>运行时流程执行实例</td></tr><tr><td></td><td>[ACT_RU_IDENTITYLINK]</td><td>运行时用户关系信息，存储任务节点与参与者的相关信息</td></tr><tr><td></td><td>[ACT_RU_JOB]</td><td>运行时作业</td></tr><tr><td></td><td>[ACT_RU_TASK]</td><td>运行时任务</td></tr><tr><td></td><td>[ACT_RU_VARIABLE]</td><td>运行时变量表</td></tr></tbody></table><h2 id="三、Activiti类关系图"><a href="#三、Activiti类关系图" class="headerlink" title="三、Activiti类关系图"></a>三、Activiti类关系图</h2><h3 id="3-1类关系图"><a href="#3-1类关系图" class="headerlink" title="3.1类关系图"></a>3.1类关系图</h3><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230522235301499.png" alt="image-20230522235301499"></p><p>在新版本中，我们通过实验可以发现IdentityService，FormService两个Serivce都已经删除了</p><h3 id="3-2-activiti-cfg-xml"><a href="#3-2-activiti-cfg-xml" class="headerlink" title="3.2 activiti.cfg.xml"></a>3.2 activiti.cfg.xml</h3><p>activiti的引擎配置文件，包括：ProcessEngineConfiguration的定义、数据源定义、事务管理器等，此文件其实就是一个spring配置文件。</p><h3 id="3-3-流程引擎配置类"><a href="#3-3-流程引擎配置类" class="headerlink" title="3.3 流程引擎配置类"></a>3.3 流程引擎配置类</h3><p>流程引擎的配置类（</p><p>ProcessEngineConfiguration），通过ProcessEngineConfiguration可以创建工作流引擎ProceccEngine，常用的两种方法如下：</p><h4 id="3-3-1-StandaloneProcessEngineConfiguration"><a href="#3-3-1-StandaloneProcessEngineConfiguration" class="headerlink" title="3.3.1 StandaloneProcessEngineConfiguration"></a>3.3.1 StandaloneProcessEngineConfiguration</h4><p>使用StandaloneProcessEngineConfigurationActiviti可以单独运行，来创建ProcessEngine，Activiti会自己处理事务。</p><p>配置文件方式：</p><p>通常在activiti.cfg.xml配置文件中定义一个id为processEngineConfiguration的bean。</p><p>方法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置数据库相关的信息--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!--数据库链接--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--数据库密码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--actviti数据库表在生成时的策略 true - 如果数据库中已经存在相应的表，那么直接使用，如果不存 在，那么会创建--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以加入连接池：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/contex </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--在默认方式下 bean的id 固定为 processEngineConfiguration--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--引入上面配置好的 链接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--actviti数据库表在生成时的策略 true - 如果数据库中已经存在相应的表，那么直接使用，如果不存 在，那么会创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-SpringProcessEngineConfiguration"><a href="#3-3-2-SpringProcessEngineConfiguration" class="headerlink" title="3.3.2 SpringProcessEngineConfiguration"></a>3.3.2 SpringProcessEngineConfiguration</h4><p>通过<strong>org.activiti.spring.SpringProcessEngineConfiguration</strong> <strong>与</strong>Spring整合。</p><p>创建spring与activiti的整合配置文件：</p><p>activiti-spring.cfg.xml （名称可修改）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd &quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 工作流引擎配置bean --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用spring事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drop-create&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- activiti的定时任务关闭 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 流程引擎 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 资源服务service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 流程运行service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 任务管理service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 历史管理service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-</span> <span class="attr">method</span>=<span class="string">&quot;getHistoryService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户管理service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;identityService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-</span> <span class="attr">method</span>=<span class="string">&quot;getIdentityService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 引擎管理service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;managementService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-</span> <span class="attr">method</span>=<span class="string">&quot;getManagementService&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/activiti&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切面，根据具体项目修改切点配置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.ihrm.service.impl.*.(..))&quot;</span>* /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>创建processEngineConfiguration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProcessEngineConfiguration</span> <span class="variable">engineConfiguration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;activiti.cfg.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>上边的代码要求activiti.cfg.xml中必须有一个processEngineConfiguration的bean</p><p>也可以使用下边的方法，更改bean 的名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br></pre></td></tr></table></figure><h3 id="3-4-工作流引擎创建"><a href="#3-4-工作流引擎创建" class="headerlink" title="3.4 工作流引擎创建"></a>3.4 工作流引擎创建</h3><p>工作流引擎（ProcessEngine），相当于一个门面接口，通过ProcessEngineConfiguration创建processEngine，通过ProcessEngine创建各个service接口。</p><h4 id="3-4-1-默认创建方式"><a href="#3-4-1-默认创建方式" class="headerlink" title="3.4.1 默认创建方式"></a>3.4.1 默认创建方式</h4><p>将activiti.cfg.xml文件名及路径固定，且activiti.cfg.xml文件中有 processEngineConfiguration的配置， 可以使用如下代码创建processEngine:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用工具类 ProcessEngines，使用classpath下的activiti.cfg.xml中的配置创建processEngine ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine(); System.out.println(processEngine);</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-一般创建方式"><a href="#3-4-2-一般创建方式" class="headerlink" title="3.4.2 一般创建方式"></a>3.4.2 一般创建方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先构建ProcessEngineConfiguration ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;); //通过ProcessEngineConfiguration创建ProcessEngine，此时会创建数据库 ProcessEngine processEngine = configuration.buildProcessEngine();</span></span><br></pre></td></tr></table></figure><h3 id="3-5-Service服务接口"><a href="#3-5-Service服务接口" class="headerlink" title="3.5 Service服务接口"></a>3.5 Service服务接口</h3><p>Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表</p><h4 id="3-5-1-Service创建方式"><a href="#3-5-1-Service创建方式" class="headerlink" title="3.5.1 Service创建方式"></a>3.5.1 Service创建方式</h4><p>通过ProcessEngine创建Service</p><p>方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br></pre></td></tr></table></figure><h4 id="4-5-2-Service总览"><a href="#4-5-2-Service总览" class="headerlink" title="4.5.2 Service总览"></a>4.5.2 Service总览</h4><table><thead><tr><th>service名称</th><th>service左右</th></tr></thead><tbody><tr><td>RepositoryService</td><td>activiti的资源管理类</td></tr><tr><td>RuntimeService</td><td>activiti的流程运行管理类</td></tr><tr><td>TaskService</td><td>activiti的任务管理类</td></tr><tr><td>HistoryService</td><td>activiti的历史管理类</td></tr><tr><td>ManagerService</td><td>activiti的引擎管理类</td></tr></tbody></table><p>简单介绍：</p><p><strong>RepositoryService</strong> </p><p>是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。</p><p>除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。</p><p>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。</p><p>获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</p><p>获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。 </p><p><strong>RuntimeService</strong> </p><p>Activiti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p><p><strong>TaskService</strong> </p><p>Activiti的任务管理类。可以从这个类中获取任务的信息</p><p><strong>HistoryService</strong> </p><p>Activiti的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p><p><strong>ManagementService</strong> </p><p>Activiti的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Activiti 系统的日常维护。</p><h2 id="四-Activi入门"><a href="#四-Activi入门" class="headerlink" title="四.Activi入门"></a>四.Activi入门</h2><p>创建Activiti工作流主要包含以下几步：</p><p>1、定义流程，按照BPMN的规范，使用流程定义工具，用<strong>流程符号</strong>把整个流程描述出来</p><p>2、部署流程，把画好的流程定义文件，加载到数据库中，生成表的数据</p><p>3、启动流程，使用java代码来操作数据库表中的内容</p><h3 id="4-1流程符号"><a href="#4-1流程符号" class="headerlink" title="4.1流程符号"></a>4.1流程符号</h3><p>它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些<strong>符</strong> </p><p><strong>号</strong>来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。</p><p>目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。</p><p>接下来我们先来了解在流程设计中常见的 符号。 </p><p>BPMN2.0的<strong>基本符合</strong>主要包含：</p><p><strong>事件</strong> <strong>Event</strong></p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523134631473.png" alt="image-20230523134631473"></p><p><strong>活动</strong> <strong>Activity</strong></p><p>活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523134916130.png" alt="image-20230523134916130"></p><p><strong>网关</strong> <strong>GateWay</strong></p><p>网关用来处理决策，有几种常用网关需要了解：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523134934747.png" alt="image-20230523134934747"></p><p><strong>排他网关（x）</strong></p><p>——只有一条路径会被选择。流程执行到该网关时，按照输出流的顺序逐个计算，当条件的计算结果为true时，继续执行当前网关的输出流；</p><p>如果多条线路计算结果都是 true，则会执行第一个值为 true 的线路。如果所有网关计算结果没有true，则引擎会抛出异常。</p><p>排他网关需要和条件顺序流结合使用，default 属性指定默认顺序流，当所有的条件不满足时会执行默认顺序流。</p><p><strong>并行网关</strong> <strong>(+)</strong> </p><p>——所有路径会被同时选择</p><p>拆分 —— 并行执行所有输出顺序流，为每一条顺序流创建一个并行执行线路。</p><p>合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。</p><p><strong>包容网关</strong> <strong>(〇)</strong> </p><p>—— 可以同时执行多条线路，也可以在网关上设置条件</p><p>拆分 —— 计算每条线路上的表达式，当表达式计算结果为true时，创建一个并行线路并继续执行</p><p>合并 —— 所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行。</p><p><strong>事件网关</strong> <strong>(+)</strong></p><p>—— 专门为中间捕获事件设置的，允许设置多个输出流指向多个不同的中间捕获事件。当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态。</p><p><strong>流向Flow</strong></p><p>流是连接两个流程节点的连线，常见的流向包含以下几种：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523140034955.png" alt="image-20230523140034955"></p><h3 id="4-2流程设计器使用"><a href="#4-2流程设计器使用" class="headerlink" title="4.2流程设计器使用"></a>4.2流程设计器使用</h3><p><strong>Activiti-Designer****使用</strong> </p><p><strong>Palette****（画板）</strong> </p><p>在idea中安装插件即可使用，画板中包括以下结点：</p><p>Connection—连接</p><p>Event—事件</p><p>Task—任务</p><p>Gateway—网关</p><p>Container—容器</p><p>Boundary event—边界事件 </p><p>Intermediate event- -中间事件</p><p>流程图设计完毕保存生成.bpmn文件</p><p><strong>新建流程</strong><strong>(IDEA**<strong>工具</strong></strong>)**</p><p>首先选中存放图形的目录(选择resources下的bpmn目录)，点击菜单：New -&gt; BpmnFile，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523140242327.png" alt="image-20230523140242327"></p><p>弹出如下图所示框，输入evection表示出差审批流程：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523140419505.png" alt="image-20230523140419505"></p><p>起完名字evection后（默认扩展名为bpmn），就可以看到流程设计页面，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523140516379.png" alt="image-20230523140516379"></p><p>绘制流程：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523170544067.png" alt="image-20230523170544067"></p><p>指定任务负责人为张三，生成png文件</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523170711920.png" alt="image-20230523170711920"></p><h2 id="五-流程操作"><a href="#五-流程操作" class="headerlink" title="五.流程操作"></a>五.流程操作</h2><h3 id="5-1-流程定义部署"><a href="#5-1-流程定义部署" class="headerlink" title="5.1 流程定义部署"></a>5.1 流程定义部署</h3><p><strong>概述</strong></p><p>将上面在设计器中定义的流程部署到activiti数据库中，就是流程定义部署。</p><p>通过调用activiti的api将流程定义的bpmn和png两个文件一个一个添加部署到activiti中，也可以将两个文件打成zip包进行部署。</p><p><strong>单个文件部署方式</strong></p><p>分别将bpmn文件和png图片文件部署。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">deployment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 得到repositoryService实例</span></span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 使用repositoryService进行部署</span></span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(<span class="string">&quot;evection.bpmn20.xml&quot;</span>)</span><br><span class="line">                .addClasspathResource(<span class="string">&quot;evection.png&quot;</span>)</span><br><span class="line">                .name(<span class="string">&quot;出差申请流程&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        <span class="comment">// 输出部署信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署id：&quot;</span>+deployment.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署名称:&quot;</span>+deployment.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。</p><p><strong>压缩包部署方式</strong> </p><p>将evection.bpmn和evection.png压缩成zip包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  打包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deployProcessByZip</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 定义zip输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="built_in">this</span></span><br><span class="line">                .getClass()</span><br><span class="line">                .getClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">&quot;evection.zip&quot;</span>);</span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(inputStream);</span><br><span class="line">        <span class="comment">// 获取repositoryService</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 流程部署</span></span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addZipInputStream(zipInputStream)</span><br><span class="line">                .deploy();</span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署名称&quot;</span>+deployment.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程部署id&quot;</span>+deployment.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行此操作后activiti会将上边代码中指定的bpm文件和图片文件保存在activiti数据库。</p><p><strong>操作数据表</strong></p><p>流程定义部署后操作activiti的3张表如下：</p><p>act_re_deployment 流程定义部署表，每部署一次增加一条记录</p><p>act_re_procdef 流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p><p>act_ge_bytearray 流程资源表</p><p>接下来我们来看看，写入了什么数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> act_re_deployment #流程定义部署表，记录流程部署信息</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523171022946.png" alt="image-20230523171022946"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> act_re_procdef #流程定义表，记录流程定义信息 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果：</p><p>注意，KEY 这个字段是用来唯一识别不同流程的关键字</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523171246441.png" alt="image-20230523171246441"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> act_ge_bytearray #资源表</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523171312690.png" alt="image-20230523171312690"></p><p>注意：</p><p>act_re_deployment和act_re_procdef一对多关系，一次部署在流程部署表生成一条记录，但一次部署可以部署多个流程定义，每个流程定义在流程定义表生成一条记录。每一个流程定义在act_ge_bytearray会存在两个资源记录，bpmn 和png。</p><p>建议：一次部署一个流程，这样部署表和流程定义表是一对一有关系，方便读取流程部署及流程定义信息。</p><h3 id="5-2-启动流程实例"><a href="#5-2-启动流程实例" class="headerlink" title="5.2 启动流程实例"></a>5.2 启动流程实例</h3><p>流程定义部署在activiti后就可以通过工作流管理业务流程了，也就是说上边部署的出差申请流程可以使用了。针对该流程，启动一个流程表示发起一个新的出差申请单，这就相当于java类与java对象的关系，类定义好后需要new创建一个对象使用，当然可以new多个对象。对于请出差申请流程，张三发起一个出差申请单需要启动一个流程实例，出差申请单发起一个出差单也需要启动一个流程实例。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStartProcess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建processEngine</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取RuntimeService</span></span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">        <span class="comment">// 根据流程定义id启动流程</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(<span class="string">&quot;myEvection&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程定义id：= &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例id = &quot;</span> + processInstance.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;流程活动id = &quot;</span> + processInstance.getActivityId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523171811100.png" alt="image-20230523171811100"></p><p>操作数据表</p><p>act_hi_actinst 流程实例执行历史</p><p>act_hi_identitylink 流程的参与用户历史信息</p><p>act_hi_procinst 流程实例历史信息</p><p>act_hi_taskinst 流程任务历史信息</p><p>act_ru_execution 流程执行信息</p><p>act_ru_identitylink 流程的参与用户信息</p><p>act_ru_task 任务信息</p><h3 id="5-3-任务查询"><a href="#5-3-任务查询" class="headerlink" title="5.3 任务查询"></a>5.3 任务查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前个人待执行的任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPersonalTaskList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 任务负责人</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">assgine</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 创建taskService</span></span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="comment">// 根据流程key和任务负责人查询任务</span></span><br><span class="line">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>) <span class="comment">// 流程key</span></span><br><span class="line">                .taskAssignee(assgine) <span class="comment">// 只查询该任务负责人的任务</span></span><br><span class="line">                .list();</span><br><span class="line">        <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务实例id = &quot;</span> + task.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务id = &quot;</span> + task.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务负责人 = &quot;</span> + task.getAssignee());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务名称 = &quot;</span> + task.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523171943718.png" alt="image-20230523171943718"></p><h3 id="5-4-流程任务处理"><a href="#5-4-流程任务处理" class="headerlink" title="5.4 流程任务处理"></a>5.4 流程任务处理</h3><p>任务负责人查询待办任务，选择任务进行处理，完成任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取taskService</span></span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="comment">// 根据流程key和任务负责人 查询任务</span></span><br><span class="line">        <span class="comment">// 返回一个任务对象</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>) <span class="comment">// 流程key</span></span><br><span class="line">                .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>) <span class="comment">// 要查询的负责人</span></span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 完成任务，参数：任务id</span></span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-流程定义信息查询"><a href="#5-5-流程定义信息查询" class="headerlink" title="5.5 流程定义信息查询"></a>5.5 流程定义信息查询</h3><p>查询流程相关信息，包含流程定义，流程部署，流程定义版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryProcessDefinition</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// repositoryService</span></span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 得到processDefinitionQuery对象</span></span><br><span class="line">        <span class="type">ProcessDefinitionQuery</span> <span class="variable">processDefinitionQuery</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery();</span><br><span class="line">        <span class="comment">// 查询出当前所有的流程定义</span></span><br><span class="line">        <span class="comment">// 条件：processDefinitionKey = evection</span></span><br><span class="line">        <span class="comment">// orderByProcessDefinitionVersion 按照版本排序</span></span><br><span class="line">        <span class="comment">// desc倒叙</span></span><br><span class="line">        <span class="comment">// list 返回集合</span></span><br><span class="line"></span><br><span class="line">        List&lt;ProcessDefinition&gt; definitionList = processDefinitionQuery.processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>)</span><br><span class="line">                .orderByProcessDefinitionVersion()</span><br><span class="line">                .desc()</span><br><span class="line">                .list();</span><br><span class="line">        <span class="comment">// 输出流程定义信息</span></span><br><span class="line">        <span class="keyword">for</span> (ProcessDefinition processDefinition : definitionList) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 id = &quot;</span> + processDefinition.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 name = &quot;</span> + processDefinition.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 key = &quot;</span> + processDefinition.getKey());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程定义 version = &quot;</span> + processDefinition.getVersion());</span><br><span class="line">            System.out.println(<span class="string">&quot;流程部署Id = &quot;</span> + processDefinition.getDeploymentId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/monsterzc/img/img/image-20230523172158417.png" alt="image-20230523172158417"></p><h3 id="5-6-流程删除"><a href="#5-6-流程删除" class="headerlink" title="5.6 流程删除"></a>5.6 流程删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDeployment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 流程部署id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">deploymentId</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 通过流程引擎获取repositoryService</span></span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 删除流程定义，如果该流程定义已有实例启动则删除4时报错</span></span><br><span class="line">        repositoryService.deleteDeployment(deploymentId);</span><br><span class="line">        <span class="comment">// 设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式，如果流程有流程实例启动不可以删除</span></span><br><span class="line">        <span class="comment">//repositoryService.deleteDeployment(deploymentId,true);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>1)使用repositoryService删除流程定义，历史表信息不会被删除</p><p>2)如果该流程定义下没有正在运行的流程，则可以用普通删除。</p><p>如果该流程定义下存在已经运行的流程，使用普通删除报错，可用级联删除方法将流程及相关记录全部删除。</p><p>先删除没有完成流程节点，最后就可以完全删除流程定义信息</p><p>项目开发中级联删除操作一般只开放给超级管理员使用.</p><h3 id="5-7-流程资源下载"><a href="#5-7-流程资源下载" class="headerlink" title="5.7 流程资源下载"></a>5.7 流程资源下载</h3><p>现在我们的流程资源文件已经上传到数据库了，如果其他用户想要查看这些资源文件，可以从数据库中把资源文件下</p><p>载到本地。</p><p>解决方案有：</p><p>1、jdbc对blob类型，clob类型数据读取出来，保存到文件目录</p><p>2、使用activiti的api来实现</p><p>使用commons-io.jar 解决IO的操作</p><p>引入commons-io依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过流程定义对象获取流程定义资源，获取bpmn和png </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程资源下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBpmnFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 得到引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取repositoryService</span></span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">        <span class="comment">// 得到查询器：processDefinition，设置查询条件，得到想要的流程定义</span></span><br><span class="line">        <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;myEvection&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">// 得到流程定义信息，得到部署id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">deploymentId</span> <span class="operator">=</span> processDefinition.getDeploymentId();</span><br><span class="line">        <span class="comment">// 通过repositoryService的方法，实现读取图片信息和bpmn信息</span></span><br><span class="line">        <span class="comment">// png图片的流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">pngInput</span> <span class="operator">=</span> repositoryService.getResourceAsStream(deploymentId, processDefinition.getDiagramResourceName());</span><br><span class="line">        <span class="comment">// bpmn文件的流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bpmnInput</span> <span class="operator">=</span> repositoryService.getResourceAsStream(deploymentId, processDefinition.getResourceName());</span><br><span class="line">        <span class="comment">// 构造outPutStream流</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file_png</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/zhengcan/Desktop/bpmn/evectionflow01.png&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file_bpmn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/zhengcan/Desktop/bpmn/evectionflow01.bpmn&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">pngOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file_png);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">bpmnOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file_bpmn);</span><br><span class="line">        <span class="comment">// 输入流，输出流的转换</span></span><br><span class="line">        IOUtils.copy(pngInput, pngOut);</span><br><span class="line">        IOUtils.copy(bpmnInput, bpmnOut);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        pngOut.close();</span><br><span class="line">        bpmnOut.close();</span><br><span class="line">        pngInput.close();</span><br><span class="line">        bpmnInput.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>deploymentId为流程部署ID </li><li>resource_name为act_ge_bytearray表中NAME_列的值</li><li>使用repositoryService的getDeploymentResourceNames方法可以获取指定部署下得所有文件的名称</li><li>使用repositoryService的getResourceAsStream方法传入部署ID和资源图片名称可以获取部署下指定名称文件的输入流</li></ol><p>最后的将输入流中的图片资源进行输出。</p><h3 id="5-8流程历史信息查看"><a href="#5-8流程历史信息查看" class="headerlink" title="5.8流程历史信息查看"></a>5.8流程历史信息查看</h3><p>即使流程定义已经删除了，流程执行的历史信息通过前面的分析，依然保存在activiti的act_hi_*相关的表中。所以我们还是可以查询流程执行的历史信息，可以通过HistoryService来查看相关的历史记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查看历史信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHistoryInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取引擎</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="comment">// 获取historyService</span></span><br><span class="line">        <span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line">        <span class="comment">// actinst表的查询对象</span></span><br><span class="line">        <span class="type">HistoricActivityInstanceQuery</span> <span class="variable">instanceQuery</span> <span class="operator">=</span> historyService.createHistoricActivityInstanceQuery();</span><br><span class="line">        <span class="comment">// 查询 actinst表，条件：根据InstanceId查询</span></span><br><span class="line">        <span class="comment">//instanceQuery.processInstanceId(&quot;2501&quot;);</span></span><br><span class="line">        <span class="comment">// 查询 actinst表，条件：根据DefinitionId查询</span></span><br><span class="line">        instanceQuery.processDefinitionId(<span class="string">&quot;myEvection:1:4&quot;</span>);</span><br><span class="line">        <span class="comment">// 增加排序操作，orderByHistoricActivityInstanceEndTime 根据开始时间排序asc升序</span></span><br><span class="line">        instanceQuery.orderByHistoricActivityInstanceEndTime().asc();</span><br><span class="line">        <span class="comment">// 查询所有内容</span></span><br><span class="line">        List&lt;HistoricActivityInstance&gt; activityInstanceList = instanceQuery.list();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (HistoricActivityInstance historicActivityInstance : activityInstanceList) &#123;</span><br><span class="line">            System.out.println(historicActivityInstance.getId());</span><br><span class="line">            System.out.println(historicActivityInstance.getActivityName());</span><br><span class="line">            System.out.println(historicActivityInstance.getProcessDefinitionId());</span><br><span class="line">            System.out.println(historicActivityInstance.getProcessDefinitionId());</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;==================================================&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> activiti7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团动态线程池实现原理</title>
      <link href="/post/e5adc838.html"/>
      <url>/post/e5adc838.html</url>
      
        <content type="html"><![CDATA[<h1 id="美团动态线程池实现原理"><a href="#美团动态线程池实现原理" class="headerlink" title="美团动态线程池实现原理"></a>美团动态线程池实现原理</h1><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>动态线程池，指的是线程池的参数可以动态修改并生效，比如corePoolSize、maximumPoolSize等。</p><p>在工作中，线程池的核心线程数和最大线程数等参数是很难估计和固，如果能在应用过程中动态进行调整，就很有必要了。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>1.直接基于SpringBoot</p><p>2.支持Nacos配置中心配置</p><p>核心配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dtp:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">core-pool-size:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">maximum-pool-size:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>创建dtp-spring-boot-stater模块和user模块</p><p>在dtp-spring-boot-stater引入nacos配置坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在user模块引入dtp-spring-boot-stater坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.can<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dtp-spring-boot-stater<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        自定义配置生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml文件配置为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">bootstrap:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">data-id:</span> <span class="string">dtp.yaml</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">yaml</span></span><br><span class="line">    <span class="attr">auto-refresh:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><h2 id="创建DtpExecutor"><a href="#创建DtpExecutor" class="headerlink" title="创建DtpExecutor"></a>创建DtpExecutor</h2><p>创建DtpExecutor对象并添加到Spring容器中。</p><p>如果要开启动态线程池，就需要做这一步，并且在创建DtpExecutor对象时，得用配置的参数，并且得支持Nacos，放到spring容器中。</p><p>基于SpringBoot的自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtpExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, maximumPoolSize, <span class="number">0</span>, TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个配置类DtpExecutorAutoConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;dtp&quot;,value = &quot;enable&quot;,havingValue = &quot;true&quot;)</span> <span class="comment">// 动态线程池需要配置开启才能使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpExecutorAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示这是一个配置类，只有在”dtp.enable&#x3D;true”的时候才会生效，没有这个配置或者为false时不会生效。</p><p>然后在DtpExecutorAutoConfiguration中定义DtpExecutor的Bean了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DtpExecutor <span class="title function_">dtpExecutor</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtpExecutor</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过Enviroment对象获取配置项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;dtp&quot;,value = &quot;enable&quot;,havingValue = &quot;true&quot;)</span> <span class="comment">// 动态线程池需要配置开启才能使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpExecutorAutoConfiguration</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DtpExecutor <span class="title function_">dtpExecutor</span><span class="params">(DtpProperties dtpProperties)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> Integer.valueOf(environment.getProperty(<span class="string">&quot;dtp.core-pool-size&quot;</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maximumPoolSize</span> <span class="operator">=</span> Integer.valueOf(environment.getProperty(<span class="string">&quot;dtp.maximum-pool-size&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtpExecutor</span>(dtpProperties.getCorePoolSize(),dtpProperties.getMaximumPoolSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使DtpAutoConfiguration配置生效，需要利用spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">com.can.dpt.DtpExecutorAutoConfiguration</span></span><br></pre></td></tr></table></figure><h2 id="NacosListener"><a href="#NacosListener" class="headerlink" title="NacosListener"></a>NacosListener</h2><p>监听nacos配置发生变化，新建一个NacosListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosListener</span> <span class="keyword">implements</span> <span class="title class_">Listener</span>, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NacosInjected</span> <span class="comment">//采用注解注入形式@NacosInjected注入可以触发nacosConfigPublishedEvent回调，也就是配置注册到nacos的时候产生的回调，其余方式不会触发</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 利用Spring的Bean初始化机制，来设置要监听的nacos的dataid</span></span><br><span class="line">    <span class="comment">// 暂时写死，最好是拿到程序员所配置的dataid和group</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        configService.addListener(<span class="string">&quot;dtp.yaml&quot;</span>,<span class="string">&quot;DEFAULT_GROUP&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取yaml配置项，并解析</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfigInfo</span><span class="params">(String configInfo)</span> &#123;</span><br><span class="line">        <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        bean.setResources(<span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(configInfo.getBytes()));</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> bean.getObject();</span><br><span class="line">        System.out.println(properties );</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在DtpExecutorAutoConfiguration中定义NacosListener为一个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> NacosListener <span class="title function_">nacosListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosListener</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从Spring容器中拿到DtpExecutor对象，利用BeanPostProcessor来存入一个static的map中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, DtpExecutor&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDtpExecutor</span><span class="params">(String name,DtpExecutor dtpExecutor)</span>&#123;</span><br><span class="line">        map.put(name, dtpExecutor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DtpExecutor <span class="title function_">getDtpExecutor</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建一个BeanPostProcessor，把DtpExecutor对象存入DtpUtil中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DtpExecutor) &#123;</span><br><span class="line">            DtpUtil.setDtpExecutor(beanName,(DtpExecutor ) bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Naocos中利用DtpUtil获取DtpExecutor对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfigInfo</span><span class="params">(String configInfo)</span> &#123;</span><br><span class="line">        <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        bean.setResources(<span class="keyword">new</span> <span class="title class_">ByteArrayResource</span>(configInfo.getBytes()));</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> bean.getObject();</span><br><span class="line">        <span class="type">DtpExecutor</span> <span class="variable">dtpExecutor</span> <span class="operator">=</span> DtpUtil.getDtpExecutor(executorProperties.getName());</span><br><span class="line">            dtpExecutor.setCorePoolSize(executorProperties.getCorePoolSize());</span><br><span class="line">            dtpExecutor.setMaximumPoolSize(executorProperties.getMaximumPoolSize());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了更灵活和多个配置线程池，创建配置类DtpProperties和DtpImportBeanDefinitionRegistrar：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;dtp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DtpExecutorProperties&gt; executors ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DtpExecutorProperties</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maximumPoolSize</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getCorePoolSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCorePoolSize</span><span class="params">(Integer corePoolSize)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getMaximumPoolSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> maximumPoolSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumPoolSize</span><span class="params">(Integer maximumPoolSize)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;DtpExecutorProperties&gt; <span class="title function_">getExecutors</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExecutors</span><span class="params">(List&lt;DtpExecutorProperties&gt; executors)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.executors = executors;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, EnvironmentAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取用户配置 dtpProperties</span></span><br><span class="line">        <span class="type">DtpProperties</span> <span class="variable">dtpProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DtpProperties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Binder</span> <span class="variable">binder</span> <span class="operator">=</span> Binder.get(environment);</span><br><span class="line">        <span class="type">ResolvableType</span> <span class="variable">type</span> <span class="operator">=</span> ResolvableType.forClass(DtpProperties.class);</span><br><span class="line">        Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(dtpProperties);</span><br><span class="line">        binder.bind(<span class="string">&quot;dtp&quot;</span>,target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="keyword">for</span> (DtpProperties.DtpExecutorProperties executorProperties : dtpProperties.getExecutors()) &#123;</span><br><span class="line">            <span class="comment">// 注册bean</span></span><br><span class="line">            <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class="line">            beanDefinition.setBeanClass(DtpExecutor.class );</span><br><span class="line">            beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(executorProperties.getCorePoolSize());</span><br><span class="line">            beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(executorProperties.getMaximumPoolSize());</span><br><span class="line">            registry.registerBeanDefinition(executorProperties.getName(),beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改DtpExecutorAutoConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DtpProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123;DtpImportBeanDefinitionRegistrar.class, DtpBeanPostProcessor.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;dtp&quot;,value = &quot;enable&quot;,havingValue = &quot;true&quot;)</span> <span class="comment">// 动态线程池需要配置开启才能使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtpExecutorAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> NacosListener <span class="title function_">nacosListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了DtpExecutor的参数修改，实现了一个动态线程池。</p>]]></content>
      
      
      <categories>
          
          <category> 美团动态线程池实现原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美团动态线程池实现原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义springboot stater</title>
      <link href="/post/4115435d.html"/>
      <url>/post/4115435d.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义SpringBoot-stater"><a href="#自定义SpringBoot-stater" class="headerlink" title="自定义SpringBoot stater"></a>自定义SpringBoot stater</h1><h2 id="stater的启动原理"><a href="#stater的启动原理" class="headerlink" title="stater的启动原理"></a>stater的启动原理</h2><ul><li><p>stater-pom引入autoconfigure包</p></li><li><p>autoconfigure包中的配置使用META-INFO&#x2F;spring.factories中的“org.springframework.boot.autoconfigure.EnableAutoConfiguration”的值，使得项目启动时加载指定的自动配置类</p><p>这里的autoconfigure指的是我们通过can-spring-boot-stater依赖的can-spring-boot-stater-autoconfigure<img src="/post/4115435d/image-20230505232632078.png" alt="image-20230505232632078"></p></li></ul><h2 id="自定义的stater步骤"><a href="#自定义的stater步骤" class="headerlink" title="自定义的stater步骤"></a>自定义的stater步骤</h2><p>1.创建can-spring-boot-stater删除多余的配置和文件夹，目录如下：</p><p><img src="/post/4115435d/image-20230505232804400.png" alt="image-20230505232804400"></p><p>pom文件引入can-spring-boot-stater-autoconfigure的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.can<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>can-spring-boot-stater-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用spring initializr创建can-spring-boot-stater-autoconfigure，选择Spring web和Spring Configuration Processor</p><p>pml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.can<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>can-spring-boot-stater-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>can-spring-boot-stater-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>can-spring-boot-stater-autoconfigure<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义配置提示坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建CanProperties.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;can&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuffix</span><span class="params">(String suffix)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.定义业务类CanService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CanProperties canProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CanProperties <span class="title function_">getCanProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> canProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCanProperties</span><span class="params">(CanProperties canProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.canProperties = canProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> canProperties.getPrefix()+<span class="string">&quot;--&quot;</span>+name+<span class="string">&quot;--&quot;</span>+canProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.创建自动配置类并添加到IOC中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 添加到IOC容器</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// web 应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CanProperties.class)</span> <span class="comment">// 让属性文件生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CanProperties canProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 注入到容器中</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(CanService.class)</span></span><br><span class="line">    <span class="keyword">public</span> CanService <span class="title function_">canService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CanService</span> <span class="variable">canService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CanService</span>();</span><br><span class="line">        canService.setCanProperties(canProperties);</span><br><span class="line">        <span class="keyword">return</span> canService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.在resource目录下创建META-INF&#x2F;spring.factories文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AutoConfigure</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.can.autoconfigure.CanAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>7.clean can-spring-boot-stater-autoconfigure 项目，然后install ，can-spring-boot-stater-autoconfigure重复这个步骤</p><p>8.新建一个demo，引入自定义stater坐标，并设置属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    自定义stater坐标   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.can<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>can-spring-boot-stater<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">can.prefix</span>=<span class="string">nihao</span></span><br><span class="line"><span class="attr">can.suffix</span>=<span class="string">fitting</span></span><br></pre></td></tr></table></figure><p><img src="/post/4115435d/image-20230505235159372.png" alt="image-20230505235159372"></p><p><strong>总结：</strong></p><p>我们在测试Controller中使用了@Autowired去自动导入了我们在hello-spring-boot-starter-autoconfigure定义的业务类，在自动导入之前，springboot就已经扫描完所有导入starter的类，最终会扫描到每个starter类依赖的xxxAutoConfigure下的META-INF&#x2F;spring.factories，通过该文件获取到xxxAutoConfiguration的全类限定名，就会去加载我们写在xxx-spring-boot-xxxAutoConfigure项目下的xxxAutoConfiguration类，也就是我们前面定义的CanAutoConfiguration，通过判断是否执行创建CanService，从而决定是否对CanProperties.class进行下一步操作（开启与对应properties的前缀进行绑定以及添加到IOC容器）</p><p>在HelloServiceAutoConfiguration中使用**@ConditionalOnMissingBean(CanService.class)，如果我们在当前容器中也就是测试项目容器有CanService.class的存在，也就不会去执行CanServiceAutoConfiguration**下的某个对应方法</p>]]></content>
      
      
      <categories>
          
          <category> 自定义springboot stater </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义springboot stater </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/post/6208627e.html"/>
      <url>/post/6208627e.html</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><strong>模式定义</strong>：</p><p>为请求创建了一个接收者对象的链。</p><p><img src="/post/6208627e/image-20230427220149503.png" alt="image-20230427220149503"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainOfResponsibility</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractHandler</span> <span class="variable">handler1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteHandler1</span>();</span><br><span class="line">        <span class="type">AbstractHandler</span> <span class="variable">handler2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteHandler2</span>();</span><br><span class="line"></span><br><span class="line">        handler1.setNext(handler2);</span><br><span class="line">        handler1.handleRequest(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AbstractHandler next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(AbstractHandler next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractHandler <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(String request)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(String request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!request.equals(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请登陆后再尝试&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.next.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(String request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request.equals(<span class="string">&quot;update&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请确认后更新&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.next.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>： </p><p>一个请求的处理需要多个对象挡住的一个活几个协作处理。</p><p><strong>优点</strong>：</p><p>1.亲戚呀的发送者和接受者结偶</p><p>2.可以控制执行顺序</p><p>3.符合开闭原则和单一职责原则</p><p>经典案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.Fillter</span><br><span class="line">javax.servlet.FilterChain</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 责任链模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/post/9a246216.html"/>
      <url>/post/9a246216.html</url>
      
        <content type="html"><![CDATA[<h1 id="观察着模式"><a href="#观察着模式" class="headerlink" title="观察着模式"></a>观察着模式</h1><p><strong>模式定义</strong>：</p><p>定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖着都会收到通知并更新。</p><p><img src="/post/9a246216/image-20230425201421405.png" alt="image-20230425201421405"></p><p><strong>应用场景</strong>：</p><p>当更改一个对象的状态可能需要更改其他对象，并且实际的对象集事先未知或动态更改时，请使用观察者模式。</p><p><strong>优点</strong>：</p><p>1.符合开闭原则</p><p>2.可以在运行时建立对象之间的关系</p>]]></content>
      
      
      <categories>
          
          <category> 观察者模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法</title>
      <link href="/post/e60e2110.html"/>
      <url>/post/e60e2110.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h1><p><strong>模式定义</strong>：</p><p>定义一个操作的算法骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可定义该算法的某些特定步骤。</p><p><img src="/post/e60e2110/image-20230424192225026.png" alt="image-20230424192225026"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractClass</span> <span class="variable">abstractClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">        abstractClass.operation();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pre handle&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;step1.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;subclass execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Servlet Api &amp; Spring 中的应用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.http.HttpServlet</span><br><span class="line">org.springframwork.web.servlet.mvc.AbstractController</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程十二(CompletableFuture)</title>
      <link href="/post/bfbb0fc5.html"/>
      <url>/post/bfbb0fc5.html</url>
      
        <content type="html"><![CDATA[<h1 id="12-CompletableFuture"><a href="#12-CompletableFuture" class="headerlink" title="12 CompletableFuture"></a>12 CompletableFuture</h1><h2 id="12-1-CompletableFuture简介"><a href="#12-1-CompletableFuture简介" class="headerlink" title="12.1 CompletableFuture简介"></a>12.1 CompletableFuture简介</h2><p>CompletableFuture在Java里面被用于异步编程，异步通常意味着非阻塞，可以使得我们的任务单独运行在与主线程分离的其他线程中，并且通过回调可以在主线程中得到异步任务的执行状态，是否完成，和是否异常等信息。</p><p>CompletableFuture实现了Future，CompletionStage接口，实现了Future接口就可以兼容现在有线程池框架，而CompletionStage接口才是异步编程的接口抽象，里面定义多种异步方法，通过这两者集合，从而打造出了强大的CompletableFuture类。</p><h2 id="12-2-Future和CompletableFuture"><a href="#12-2-Future和CompletableFuture" class="headerlink" title="12.2 Future和CompletableFuture"></a>12.2 Future和CompletableFuture</h2><p>Future在Java里面，通常用来表示一个异步任务的引用，比如我们将任务提交到线程池里面，然后我们会得到一个Future，在Future里面有isDone方法来判断任务是否处理结束，还有get方法可以一直阻塞知道任务结束然后获取结果，但整体来说这种方式，还是同步的，因为需要客户端不断阻塞等待或者不断轮询才能知道任务是否完成。</p><p><strong>Future的主要缺点如下：</strong></p><p>（1）不支持手动完成</p><p>我提交了一个任务，但是执行太慢了，我通过其他路径已经获取到了任务结果，现在没法把这个任务结果通知到正在执行的线程，所以必须主动取消或者一直等待它执行完成</p><p>（2）不支持进一步的阻塞调用</p><p>通过Future的个体方法会一直阻塞到任务完成，但是想在获取任务之后执行额外的任务，因为Future不支持回调函数，所以无法实现这个功能</p><p>（3）不支持链式调用</p><p>对于Future的执行结果，我们想继续传到下一个Future处理使用，从而形成一个链式的pipeline调用，这在Future中是没法实现的。</p><p>（4）不支持多个Future合并</p><p>比如我们有10个Future并行执行，我们想在所有的Future运行完毕之后，执行某些函数，是没法通过Future实现的。</p><p>（5）不支持异常处理</p><p>Future的API没有任何的异常处理的api，所以在异步运行时，如果出了问题是不好定位 的。</p><h2 id="12-3-CompletableFuture入门"><a href="#12-3-CompletableFuture入门" class="headerlink" title="12.3 CompletableFuture入门"></a>12.3 CompletableFuture入门</h2><h3 id="12-3-1-使用CompletableFuture"><a href="#12-3-1-使用CompletableFuture" class="headerlink" title="12.3.1 使用CompletableFuture"></a>12.3.1 使用CompletableFuture</h3><p>场景：主线程里面创建了一个CompletableFuture，然后主线程调用get方法会阻塞，最后我们在一个子线程中使其终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  主线程里面创建一个 CompletableFuture，然后主线程调用 get 方法会阻塞，最后我们</span></span><br><span class="line"><span class="comment">     * 在一个子线程中使其终止</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; future = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;子线程开始干活&quot;</span>);</span><br><span class="line">                <span class="comment">// 子线程睡眠5秒</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="comment">// 在子线程中完成主线程</span></span><br><span class="line">                future.complete(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="comment">// 主线程调用get方法阻塞</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程调用get方法获取的结果为：&quot;</span>+future.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成，阻塞结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-2-没有返回值的异步任务"><a href="#12-3-2-没有返回值的异步任务" class="headerlink" title="12.3.2 没有返回值的异步任务"></a>12.3.2 没有返回值的异步任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有返回值的异步任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程开始干活&quot;</span>);</span><br><span class="line">                <span class="comment">// 子线程休眠5秒</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程阻塞</span></span><br><span class="line">        future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成，阻塞结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-3-有返回值的异步任务"><a href="#12-3-3-有返回值的异步任务" class="headerlink" title="12.3.3 有返回值的异步任务"></a>12.3.3 有返回值的异步任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有返回值的异步任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程开始干活&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;子线程完成任务&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程阻塞</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成，获取的结果为：&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-3-4-线程依赖"><a href="#12-3-4-线程依赖" class="headerlink" title="12.3.4 线程依赖"></a>12.3.4 线程依赖</h3><p>当一个线程依赖另一个线程时，可以使用thenApply方法来把着两个线程串行化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 现对一个数加10，然后取平方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程开始&quot;</span>);</span><br><span class="line">                num += <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;).thenApply(Integer-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> num * num;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 阻塞主线程</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线成阻塞结束，获取的结果为：&quot;</span>+value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-5-消费处理结果"><a href="#12-3-5-消费处理结果" class="headerlink" title="12.3.5 消费处理结果"></a>12.3.5 消费处理结果</h3><p>thenAccept消费处理结果，接受任务的处理结果，并消费处理，无返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始...&quot;</span>);</span><br><span class="line">        CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;加10子线程开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                num += <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">        &#125;).thenApply(Integer-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> num * num;</span><br><span class="line">        &#125;).thenAccept(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程全部完成，最后调用accept，结果为：&quot;</span>+integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-6-异常处理"><a href="#12-3-6-异常处理" class="headerlink" title="12.3.6 异常处理"></a>12.3.6 异常处理</h3><p>exceptionally异常处理，出现异常时触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * exceptionally 异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程➕10开始&quot;</span>);</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;).exceptionally(ex -&gt; &#123;</span><br><span class="line">            System.out.println(ex.getMessage());</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成，获取的结果为：&quot;</span>+integer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>handle类似于thenAccept&#x2F;thenRun方法，是最后一步的处理调用，但是同时可以处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程➕10开始&quot;</span>);</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;).handle((i,ex) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ex != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发生了异常，异常消息为：&quot;</span>+ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程完成，获取的结果为：&quot;</span>+integer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-7-结果合并"><a href="#12-3-7-结果合并" class="headerlink" title="12.3.7 结果合并"></a>12.3.7 结果合并</h3><p>thenCompose合并两个没有依赖关系的CompletableFutures的执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 第一步加10</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;操作加10&quot;</span>);</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并结果</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; future1 = future.thenCompose(integer -&gt;</span><br><span class="line">                CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> integer + <span class="number">1</span>;</span><br><span class="line">                &#125;));</span><br><span class="line"></span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(future1.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>thenCombine合并两个没有依赖关系的Completablefuturer任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 第一步加10</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;操作加10&quot;</span>);</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;操作乘10&quot;</span>);</span><br><span class="line">            num =num * <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并两个结果</span></span><br><span class="line">        CompletableFuture&lt;List&lt;Integer&gt;&gt; future = job1.thenCombine(job2, <span class="keyword">new</span> <span class="title class_">BiFunction</span>&lt;Integer, Integer, List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">apply</span><span class="params">(Integer integer, Integer integer2)</span> &#123;</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(integer);</span><br><span class="line">                list.add(integer2);</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程任务结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取的结果为：&quot;</span>+future.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>合并多个任务的结果allOf与anyOf</p><p><strong>allOf：</strong>一系列独立的future任务，等其所有的任务执行完后做一些事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 现对一个数加10，然后乘10，然后减10，然后除10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        List&lt;CompletableFuture&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line">        list.add(job1);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            num = num * <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line">        list.add(job2);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            num -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line">        list.add(job3);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; job4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            num = num / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;);</span><br><span class="line">        list.add(job4);</span><br><span class="line"><span class="comment">// 多任务合并</span></span><br><span class="line">        List&lt;Integer&gt; collect = list.stream().map(CompletableFuture&lt;Integer&gt;::join).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>anyOf：</strong>只要多个future里面有一个返回，整个任务就可以结束，而不需要等到每一个future结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 现对一个数加10，然后乘10，然后减10，然后除10</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">       CompletableFuture&lt;Integer&gt;[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">       CompletableFuture&lt;Integer&gt; job1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               num += <span class="number">10</span>;</span><br><span class="line">               Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       futures[<span class="number">0</span>] = job1;</span><br><span class="line"></span><br><span class="line">       CompletableFuture&lt;Integer&gt; job2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               num = num * <span class="number">10</span>;</span><br><span class="line">               Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       futures[<span class="number">1</span>] = job2;</span><br><span class="line">       CompletableFuture&lt;Integer&gt; job3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               num -= <span class="number">10</span>;</span><br><span class="line">               Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       futures[<span class="number">2</span>] = job3;</span><br><span class="line"></span><br><span class="line">       CompletableFuture&lt;Integer&gt; job4 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               num = num / <span class="number">10</span>;</span><br><span class="line">               Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       futures[<span class="number">3</span>] = job4;</span><br><span class="line"></span><br><span class="line">       CompletableFuture&lt;Object&gt; future = CompletableFuture.anyOf(futures);</span><br><span class="line">       System.out.println(future.get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CompletableFuture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程十一(Fork/Join)</title>
      <link href="/post/4e953856.html"/>
      <url>/post/4e953856.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-Fork-x2F-Join"><a href="#11-Fork-x2F-Join" class="headerlink" title="11 Fork&#x2F;Join"></a>11 Fork&#x2F;Join</h1><h2 id="11-1-Fork-x2F-Join-框架简介"><a href="#11-1-Fork-x2F-Join-框架简介" class="headerlink" title="11.1 Fork&#x2F;Join 框架简介"></a>11.1 Fork&#x2F;Join 框架简介</h2><p>Fork&#x2F;Join它可以将一个大的任务拆分成多个子任务进行并行处理，最后将子任务结果合并成最后的计算结果，并进行输出。Fork&#x2F;Join框架要完成两件事情：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fork: 把一个复杂任务进行拆分，大事化小</span><br><span class="line">Join:把分拆任务的结果进行合并</span><br></pre></td></tr></table></figure><p><img src="/post/4e953856/image-20230502221418919.png" alt="image-20230502221418919"></p><p>1.任务风格：首先Fork&#x2F;Join框架需要把大的任务分割成足够小的子任务，如果子任务比较大的话还要对子任务进行继续分割</p><p>2.执行任务合并结果：分割的子任务分别放到双端队列里，然后几个启动线程分别从双端队列里获取任务执行。子任务执行完的结果都放在另外一个队列里，启动一个线程从队列里取数据，然后合并这些数据。</p><p>在Java的Fork&#x2F;Join框架中，使用两个类完成上述操作。</p><ul><li><p><strong>ForkJoinTask：</strong>我们使用Fork&#x2F;Join框架，首先需要创建一个ForkJoin任务。该任务提供了在任务中执行fork和join的机制。通常情况下我们不需要直接继承ForkJoinTask类，只需要继承它的子嘞，Fork&#x2F;Join框架提供了两个子类：</p><p>​a.RecursiveAction:用于没有返回结果的任务</p><p>​b.RecursiveTask:用于有返回结果的任务</p></li><li><p>**ForkJoinPool:**ForkJoinTask需要通过ForkJoinPool来执行</p></li><li><p><strong>RecursiveTask：</strong>继承后可以实现递归(自己调自己)调用任务</p></li></ul><p><strong>Fork&#x2F;Join框架的实现原理</strong></p><p>ForkJoinPool由ForkJoinTask数组和ForkJoinWorkerThread数组组成，ForkJoinTask数组负责将存放以及将程序提交给ForkJoinPool，而ForkJoinWorkerThread负责执行这些任务。</p><h2 id="11-2-Fork方法"><a href="#11-2-Fork方法" class="headerlink" title="11.2 Fork方法"></a>11.2 Fork方法</h2><p><img src="/post/4e953856/image-20230502225652498.png" alt="image-20230502225652498"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分支合并池 类比=&gt; 线程池</span><br></pre></td></tr></table></figure><p><img src="/post/4e953856/image-20230502225840080.png" alt="image-20230502225840080"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归任务：继承后可以实现递归(自己调自己)调用的任务</span><br></pre></td></tr></table></figure><p><strong>Fork方法的实现原理</strong>：当我们调用ForkJoinTask的fork方法时，程序会把任务放在ForkJoinWorkerThread的pushTask的<strong>workQueue</strong>中，异步地执行这个任务，然后立即返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title function_">fork</span><span class="params">()</span> &#123;</span><br><span class="line">    Thread t;</span><br><span class="line">    <span class="keyword">if</span> ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">        ((ForkJoinWorkerThread)t).workQueue.push(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ForkJoinPool.common.externalPush(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pushTask方法把当前任务放在ForkJoinTask数组队列里。然后再调用ForkjoinPool的singleWork()方法唤醒或创建一个工作线程来执行任务。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(ForkJoinTask&lt;?&gt; task)</span> &#123;</span><br><span class="line">    ForkJoinTask&lt;?&gt;[] a; ForkJoinPool p;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> base, s = top, n;</span><br><span class="line">    <span class="keyword">if</span> ((a = array) != <span class="literal">null</span>) &#123;    <span class="comment">// ignore if queue removed</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> a.length - <span class="number">1</span>;     <span class="comment">// fenced write for task visibility</span></span><br><span class="line">        U.putOrderedObject(a, ((m &amp; s) &lt;&lt; ASHIFT) + ABASE, task);</span><br><span class="line">        U.putOrderedInt(<span class="built_in">this</span>, QTOP, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ((n = s - b) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p = pool) != <span class="literal">null</span>)</span><br><span class="line">                p.signalWork(p.workQueues, <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= m)</span><br><span class="line">            growArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-join方法"><a href="#11-3-join方法" class="headerlink" title="11.3 join方法"></a>11.3 join方法</h2><p>Join方法的主要作用是阻塞当前线程并等待获取结果。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">join</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">        reportException(s);</span><br><span class="line">    <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它首先调用doJoin方法，通过doJoin()方法得到当前任务的状态来判断返回什么结果，任务状态有4种：</p><p><strong>&#x3D;&#x3D;已完成（NOMAL）、被取消（CANCELLED）、信号（SINGAL）和出现异常（EXCEPTIONAL）&#x3D;&#x3D;</strong></p><ul><li>如果任务状态是已完成，则直接返回任务结果</li><li>如果任务状态是被取消，则直接抛出CancellationExceptiom</li><li>如果任务是抛出异常，则直接抛出对应的异常</li></ul><p>分析一下doJoin方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">doJoin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class="line">    <span class="keyword">return</span> (s = status) &lt; <span class="number">0</span> ? s :</span><br><span class="line">        ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class="line">        (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class="line">        tryUnpush(<span class="built_in">this</span>) &amp;&amp; (s = doExec()) &lt; <span class="number">0</span> ? s :</span><br><span class="line">        wt.pool.awaitJoin(w, <span class="built_in">this</span>, <span class="number">0L</span>) :</span><br><span class="line">        externalAwaitDone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">doExec</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> s; <span class="type">boolean</span> completed;</span><br><span class="line">        <span class="keyword">if</span> ((s = status) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                completed = exec();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable rex) &#123;</span><br><span class="line">                <span class="keyword">return</span> setExceptionalCompletion(rex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (completed)</span><br><span class="line">                s = setCompletion(NORMAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在doJoin()方法流程如下：</p><p>1.首先通过查看任务的状态，看任务是否已经执行完成，如果执行完成，则直接返回任务状态；</p><p>2.如果没有执行完，则从数组里取出任务并执行。</p><p>3.如果任务顺利完成，则设置任务状态为NORMAL，如果出现异常，则记录异常，并将任务状态设置为EXCEPTIONAL。</p><h2 id="11-4-Fork-x2F-Join框架的异常处理"><a href="#11-4-Fork-x2F-Join框架的异常处理" class="headerlink" title="11.4 Fork&#x2F;Join框架的异常处理"></a>11.4 Fork&#x2F;Join框架的异常处理</h2><p>ForkJoinTask 在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以 ForkJoinTask 提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过 ForkJoinTask 的getException 方法获取异常。getException 方法返回 Throwable 对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回 null。 </p><h2 id="11-5-入门案例"><a href="#11-5-入门案例" class="headerlink" title="11.5 入门案例"></a>11.5 入门案例</h2><p><strong>场景：生成一个计算任务，计算1+2+3…+1000,&#x3D;&#x3D;每100个数切分一个子任务&#x3D;&#x3D;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义任务</span></span><br><span class="line">        <span class="type">TaskExample</span> <span class="variable">taskExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExample</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 定义执行对象</span></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        ForkJoinTask&lt;Integer&gt; forkJoinTask = forkJoinPool.submit(taskExample);</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(forkJoinTask.get());</span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskExample</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> begin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskExample</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.begin = begin;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 计算每100个数的和,小于100相加</span></span><br><span class="line">        <span class="keyword">if</span> (end - begin &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i= begin;i&lt;= end;i++)&#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 切分成两块</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> begin+<span class="number">100</span>;</span><br><span class="line">            <span class="type">TaskExample</span> <span class="variable">taskExample1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExample</span>(begin, middle);</span><br><span class="line">            <span class="type">TaskExample</span> <span class="variable">taskExample2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExample</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            <span class="comment">// 执行异步 结果拆分</span></span><br><span class="line">            taskExample1.fork();</span><br><span class="line">            taskExample2.fork();</span><br><span class="line">            <span class="comment">// 同步阻塞获取执行结果 合并</span></span><br><span class="line">            result = taskExample1.join()+taskExample2.join();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fork/Join </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fork/Join </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程十(Thread Pool线程池)</title>
      <link href="/post/c713d291.html"/>
      <url>/post/c713d291.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-ThreadPool线程池"><a href="#10-ThreadPool线程池" class="headerlink" title="10 ThreadPool线程池"></a>10 ThreadPool线程池</h1><h2 id="10-1-线程池简介"><a href="#10-1-线程池简介" class="headerlink" title="10.1 线程池简介"></a>10.1 线程池简介</h2><p>线程池：一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配颗并发执行的任务。这避免了在处理短时间任务时创建与销毁线程的代价。线程池不仅能保证内核的充分利用，还能防止过度调度。</p><p>例子：10年前单核cpu电脑，假如多线程，像马戏团小丑玩多个球，cpu需要来回切换。现在是多核电脑，多个线程各自跑在独立的cpu上，不用切换效率高。</p><p><strong>线程池的优势：</strong>线程池做的工作只要是控制运行的线程数量，在处理过程中将任务放入队列，然后知啊线程创建后启动这些任务，如果线程数量超过了最大数量，超过数量的线程排队等候，等待其他线程执行完毕，再从队列中取出任务来执行。</p><p><strong>它的主要特点为：</strong></p><ul><li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度：当任务到达时，任务可以不需要等待线程创建就能立即执行。</li><li>提高线程的可管理性：线程时稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li><li><strong>Java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors,ExecutorService,ThreadPoolExecutor者几个类</strong></li></ul><p><img src="/post/c713d291/image-20230501230511152.png" alt="image-20230501230511152"></p><h2 id="10-2-线程池参数说明"><a href="#10-2-线程池参数说明" class="headerlink" title="10.2 线程池参数说明"></a>10.2 线程池参数说明</h2><p>五种常用的线程池</p><h3 id="10-2-1-常用参数-重点"><a href="#10-2-1-常用参数-重点" class="headerlink" title="10.2.1 常用参数(重点)"></a>10.2.1 常用参数(重点)</h3><ul><li>corePoolSize 线程的核心线程数</li><li>maximumPoolSize 能容纳的最大线程数</li><li>keepAliveTime 空闲线程存活时间</li><li>unit 存活的时间单位</li><li>workQueue 存放提交但未执行任务的队列</li><li>threadFactory 创建线程的工厂类</li><li>handler 等待队列满后的拒绝策略</li></ul><p>线程池中，有三个重要的参数，决定影响了拒绝策略：corePoolSize -核心线程数，也即最小的线程数。workQueue - 阻塞队列。maximumPoolSize - 最大线程数</p><p>当提交任务数大于corePoolSize的时间，会优先将任务放到workQueue阻塞队列中。当阻塞队列饱和后，会扩充线程池中线程数，知道达到maximumPoolSize最大线程数配置。此时，再多余的任务，则会触发线程池的拒绝策略了。</p><p>总结起来，也就是一句话，<strong>当提交的任务数大于（workQueue.size()+maximumPoolSize），就会触发线程池的拒绝策略。</strong></p><h3 id="10-2-2-拒绝策略-重点"><a href="#10-2-2-拒绝策略-重点" class="headerlink" title="10.2.2 拒绝策略(重点)"></a>10.2.2 拒绝策略(重点)</h3><p><strong>CallerRunsPollicy：</strong>当触发拒绝策略，只要线程池没有关闭的话，则使用调用线程直接运行任务。一般并发量比较小，性能要求不高，不允许失败。但是，由于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能效率上必然的损失较大。</p><p><strong>AbortPolicy：</strong>丢弃任务，并抛出拒绝执行RejectedExecutionException异常信息。线程默认的拒绝策略。必须处理好抛出的异常，否则会打断当前的执行流程，影响后续的任务执行。</p><p><strong>DiscardPolicy：</strong>直接 丢弃，其他啥都没有。</p><p><strong>DiscardOldestPolict：</strong>当触发拒绝策略，只要线程池没有关闭的话，丢弃阻塞队列workQueue中最老的一个任务，并将性任务加入。</p><h2 id="10-3-线程池的种类与创建"><a href="#10-3-线程池的种类与创建" class="headerlink" title="10.3 线程池的种类与创建"></a>10.3 线程池的种类与创建</h2><h3 id="10-3-1-newCachedThreadPool-常用"><a href="#10-3-1-newCachedThreadPool-常用" class="headerlink" title="10.3.1 newCachedThreadPool(常用)"></a>10.3.1 newCachedThreadPool(常用)</h3><p><strong>作用：</strong>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p><strong>特点：</strong></p><ul><li>线程池中数量没有固定，可达到最大值（integer.MAX_VALUE）</li><li>线程池中的线程可进行缓存利用和回收（回收默认时间为1分钟）</li><li>当线程池中，没有可用线程，会重新创建一个线程。</li></ul><p><strong>创建方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可缓存线程池</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* corePoolSize 线程池的核心线程数</span></span><br><span class="line"><span class="comment">* maximumPoolSize 能容纳的最大线程数</span></span><br><span class="line"><span class="comment">* keepAliveTime 空闲线程存活时间</span></span><br><span class="line"><span class="comment">* unit 存活的时间单位</span></span><br><span class="line"><span class="comment">* workQueue 存放提交但未执行任务的队列</span></span><br><span class="line"><span class="comment">* threadFactory 创建线程的工厂类:可以省略</span></span><br><span class="line"><span class="comment">* handler 等待队列满后的拒绝策略:可以省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">Executors.defaultThreadFactory(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());                                     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>场景：</strong>适用于创建一个可无限扩大的线程池，服务器负载压力较轻，执行时间较短，任务多的场景。</p><h3 id="10-3-2-newFixedThreadPool-常用"><a href="#10-3-2-newFixedThreadPool-常用" class="headerlink" title="10.3.2 newFixedThreadPool(常用)"></a>10.3.2 newFixedThreadPool(常用)</h3><p><strong>作用：</strong>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后需的任务（如果需要）。在某个线程被显示地关闭之前，池中的线程将一直存在。</p><p><strong>特征：</strong></p><ul><li>线程池中的线程数处于一定的量，可以很好的控制线程的并发量</li><li>线程可以重复被使用，在显示关闭之前，都将一直存在</li><li>超出一定量的线程被提交时候需在队列中等待</li></ul><p>创建方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 固定长度线程池</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* corePoolSize 线程池的核心线程数</span></span><br><span class="line"><span class="comment">* maximumPoolSize 能容纳的最大线程数</span></span><br><span class="line"><span class="comment">* keepAliveTime 空闲线程存活时间</span></span><br><span class="line"><span class="comment">* unit 存活的时间单位</span></span><br><span class="line"><span class="comment">* workQueue 存放提交但未执行任务的队列</span></span><br><span class="line"><span class="comment">* threadFactory 创建线程的工厂类:可以省略</span></span><br><span class="line"><span class="comment">* handler 等待队列满后的拒绝策略:可以省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                  Executors.defaultThreadFactory(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景：</strong>适用于可以预测线程数量的业务中，或者服务器负载均衡较重，对线程有严格限制的场景。</p><h2 id="10-3-3-newSingleThreadPoolExecutor-常用"><a href="#10-3-3-newSingleThreadPoolExecutor-常用" class="headerlink" title="10.3.3 newSingleThreadPoolExecutor(常用)"></a>10.3.3 newSingleThreadPoolExecutor(常用)</h2><p><strong>作用：</strong>创建一个使用单个worker线程的Executor，以无界队列方式来运行该线程。（注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程，那么如果需要，一个新线程将代替它执行后续的任务）。可保证顺序的执行各个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的newFixedThreadPool不同，可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。</p><p><strong>特征：</strong>线程池中最多执行一个线程，之后提交的线程活动将会排在队列中以此执行</p><p><strong>创建方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单一线程池</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* corePoolSize 线程池的核心线程数</span></span><br><span class="line"><span class="comment">* maximumPoolSize 能容纳的最大线程数</span></span><br><span class="line"><span class="comment">* keepAliveTime 空闲线程存活时间</span></span><br><span class="line"><span class="comment">* unit 存活的时间单位</span></span><br><span class="line"><span class="comment">* workQueue 存放提交但未执行任务的队列</span></span><br><span class="line"><span class="comment">* threadFactory 创建线程的工厂类:可以省略</span></span><br><span class="line"><span class="comment">* handler 等待队列满后的拒绝策略:可以省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景：适用于需要保证顺序执行各个任务，并且在任意时间点，不会同时有多个线程的场景。</p><h3 id="10-3-4-newScheduleThreadPool-了解"><a href="#10-3-4-newScheduleThreadPool-了解" class="headerlink" title="10.3.4 newScheduleThreadPool(了解)"></a>10.3.4 newScheduleThreadPool(了解)</h3><p><strong>作用：</strong>线程支持定时以及周期性执行任务，创建一个corePoolSize为传入参数，最大线程数为整形的最大线程池</p><p><strong>特征：</strong></p><p>（1）线程池中具有指定数量的线程，即使空线程也将保留</p><p>（2）可定时或者延迟线程活动</p><p><strong>创建方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="type">int</span> corePoolSize, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize, threadFactory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>场景：</strong>适用于需要多个后台线程执行周期任务的场景</p><h3 id="10-3-5-newWorkStealingPool"><a href="#10-3-5-newWorkStealingPool" class="headerlink" title="10.3.5 newWorkStealingPool"></a>10.3.5 newWorkStealingPool</h3><p>Jdk1.8提供的线程池，底层适用的是ForkJoinPool实现，创建一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu核数的线程来并行执行任务</p><p><strong>创建方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newWorkStealingPool</span><span class="params">(<span class="type">int</span> parallelism)</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* parallelism：并行级别，通常默认为 JVM 可用的处理器个数</span></span><br><span class="line"><span class="comment">* factory：用于创建 ForkJoinPool 中使用的线程。</span></span><br><span class="line"><span class="comment">* handler：用于处理工作线程未处理的异常，默认为 null</span></span><br><span class="line"><span class="comment">* asyncMode：用于控制 WorkQueue 的工作模式:队列---反队列</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span></span><br><span class="line">        (parallelism,</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景</strong>：适用于大耗时，可并行执行的场景。</p><h2 id="10-4-线程池入门案例"><a href="#10-4-线程池入门案例" class="headerlink" title="10.4 线程池入门案例"></a>10.4 线程池入门案例</h2><p>场景：火车站3个售票口，10个用户买票。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义线程池：线程数量为3，--窗口为3</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                <span class="number">60L</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 10个人买票</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;窗口，开始卖票&quot;</span>);</span><br><span class="line">                            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;窗口买票结束&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 完成后结束</span></span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-5-线程池底层原理（重要）"><a href="#10-5-线程池底层原理（重要）" class="headerlink" title="10.5 线程池底层原理（重要）"></a>10.5 线程池底层原理（重要）</h2><p><img src="/post/c713d291/image-20230502161448530.png" alt="image-20230502161448530"></p><p>1.在创建了线程池后，线程池中的线程池叔为零。</p><p>2.当调用execute()方法添加一个请求任务时，线程会做出如下判断：</p><ol><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</li><li>如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li></ol><p>3.当一个线程完成任务时，他会从队列中取下一个任务来执行</p><p>4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：</p><ol><li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉</li><li>所以线程池的所有任务完成后，它最终会收缩到从corePoolSize的大小。</li></ol><p><img src="/post/c713d291/image-20230502164121448.png" alt="image-20230502164121448"></p><h2 id="10-6-注意事项（重要）"><a href="#10-6-注意事项（重要）" class="headerlink" title="10.6 注意事项（重要）"></a>10.6 注意事项（重要）</h2><p>1.项目中创建多线程时，使用常见的三种线程池创建方式，单一、可变、定长都有一定问题，原因是FixedThreadPool和SingleThreadExecutor底层都是用LinkedBlockingQueue实现的，这个队列最大长度为integer.MAX_VALUE，容易导致OOM。所以实际生产一般自己通过ThreadPoolExecutor的7个尝试，自定义线程池。</p><p>2.创建线程池推荐使用ThreadPoolExecutor及其7个参数手动创建</p><ul><li>corePoolSize线程池的核心线程数</li><li>maximumPoolSize能容纳的最大线程数</li><li>keepAliveTime空闲线程存活时间</li><li>unit存活的时间单位</li><li>workQueue存放提交但未执行任务的队列</li><li>threadFactory创建线程的工厂类</li><li>handler等待队列满后的拒绝策略</li></ul><p>3.为什么不允许使用Executor的方式手动创建线程池，如下图 </p><p><img src="/post/c713d291/image-20230502165628493.png" alt="image-20230502165628493"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Thread Pool 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程九(阻塞队列)</title>
      <link href="/post/cbb36062.html"/>
      <url>/post/cbb36062.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-阻塞队列"><a href="#9-阻塞队列" class="headerlink" title="9 阻塞队列"></a>9 阻塞队列</h1><h2 id="9-1-BlockingQueue-简介"><a href="#9-1-BlockingQueue-简介" class="headerlink" title="9.1 BlockingQueue 简介"></a>9.1 BlockingQueue 简介</h2><p>Concurrent包中，BlcokingQueue很好的解决了多线程中，如何高效安全“传输”数据的问题。通过这些高效并且线程安全的队列类，为我们快速戴安高质量的多线程程序带来极大的便利。本文详细介绍了BlockingQueue家庭中的锁欧成员，包括他们各自的功能以及常见使用场景。</p><p>阻塞队列，故名思义，首先它是一个队列，通过一个共享的队列，可以是的数据由队列的一段输入，从另一端输出；</p><img src="/post/cbb36062/image-20230430173802143.png" alt="image-20230430173802143" style="zoom:150%;"><p>当队列是空的，从队列中获取元素的操作将会被阻塞</p><p>当队列是满的，从队列中添加元素的操作将会被操作</p><p>试图从空的队列获取元素的线程将会被阻塞，直到其他线程往空的队列插入新的元素</p><p>试图向已满的队列添加新元素的线程将会被阻塞，直到其他线程从队列中移除一个或多个元素或者完全清空，使队列变得空闲起来并后续新增</p><p><strong>常见的队列主要有以下两种：</strong></p><ul><li>先进先出（FIFO）：先出入的队列的元素也最先出 队列，类似于排队的功能。从某种程度上来说这种队列也体现了一种公平性。</li><li>后进后出（LIFO）：后插入队列的元素最先出队列，这种队列优先处理最近发生的事件（栈）</li></ul><p>在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤起</p><p><strong>为什么需要BlockingQueue</strong></p><p>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤起线程，因为这一切BlockingQueue都给你一手包办了</p><p>在concurrent包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p><p>多线程环境中，通过队列可以很容易实现数据共享，比如经典的“生产者”和“消费者”模型中，通过队列可以很便利地实现两者之间的数据共享。假设我们有若干生产者线程，另外又有若干个消费者线程。如果生产者线程需要把准备好的数据共享给消费者线程，利用队列的方式来传递数据，就可以很方便地解决他们之间的数据共享问题。但如果生产者和消费者在某个时间段内，万一发生数据处理速度不匹配的情况呢？理想情况下，如果生产者产出数据的速度大于消费者消费的速度，并且当生产出来的数据积累到一定程度的时候，那么生产者必须暂停等待一下（阻塞生产者线程），以便等待消费者线程把积累的数据处理完毕，反之亦然。</p><ul><li>当队列没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放入队列</li><li>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有空的位置，线程被自动唤醒</li></ul><h2 id="9-2-BlockingQueue核心方法"><a href="#9-2-BlockingQueue核心方法" class="headerlink" title="9.2 BlockingQueue核心方法"></a>9.2 BlockingQueue核心方法</h2><table><thead><tr><th>方法类型</th><th>特殊值</th><th>抛出异常</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>offer(e)</td><td>add(e)</td><td>put(e)</td><td>offer(e, time,unit)</td></tr><tr><td>移除</td><td>poll()</td><td>remove()</td><td>take()</td><td>poll(time, unit)</td></tr><tr><td>检查</td><td>peek()</td><td>element()</td><td>不可用</td><td>不可用</td></tr></tbody></table><table><thead><tr><th align="left">抛出异常</th><th>当阻塞队列满时，再往队列里add插入元素会抛IllegalStateException:Queue full <br>当阻塞队列空时，再往队列里remove移除元素会抛NotSuchElementException</th></tr></thead><tbody><tr><td align="left">特殊值</td><td>插入方法，成功true失败false<br>移除方法，成功返回出队列的元素，队列里没有就返回null</td></tr><tr><td align="left">一直阻塞</td><td>当阻塞队列满时，生产者线程继续往队列里put元素，队列会一直阻塞生产者线程直到put数据or响应中断退出<br>当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用</td></tr><tr><td align="left">超时退出</td><td>当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table><p><strong>BlockingQueue的核心方法：</strong></p><p><strong>1.放入数据</strong></p><ul><li>offer(anObject):表示如果可能的话，将anObject加到BlockingQueue里，即如果BlockingQueue可以容纳，则返回true，否则返回false。<strong>（本方法不阻塞当前执行方法的线程）</strong></li><li>offer(E e, long timeout, TimeUnit unit):可以设定等待的时间,如果在指定的时间内,还不能往队列中加入BlockingQueue,则返回失败</li><li>put(anObject):把anObject加到BlockingQueue里,如果BlockingQueue没有空间,则调用此方法的线程将被阻断直到BlockingQueue里面有空间再继续</li></ul><p><strong>2.获取数据</strong></p><ul><li>poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,<strong>则可以等time参数规定的时间,取不到时返回null</strong></li><li>poll(long timeout, TimeUnit unit):从BlockingQueue取出一个队首的对象,如果在指定时间内,队列一旦有数据可取,则立即返回队列中的数据。否则直到时间超时还没有数据取出,返回失败。</li><li>take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,<strong>阻断进入等待状态直到BlockingQueue有新的数据被加入;</strong></li><li>drainTo():一次性从BlockingQueue获取所有可用的数据对象(还可以指定获取数据的个数),通过该方法,可以提升获取数据效率;不需要多次分批枷锁或释放锁.</li></ul><h2 id="9-3-入门案例"><a href="#9-3-入门案例" class="headerlink" title="9.3 入门案例"></a>9.3 入门案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一组</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.add(&quot;a&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.add(&quot;b&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.add(&quot;c&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.element());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二组</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.add(&quot;x&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三组</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.offer(&quot;a&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.offer(&quot;b&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.offer(&quot;c&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.offer(&quot;x&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三组</span></span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;a&quot;);</span></span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;b&quot;);</span></span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;c&quot;);</span></span><br><span class="line"><span class="comment">//        blockingQueue.put(&quot;x&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line"><span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四组</span></span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;x&quot;</span>,<span class="number">3L</span>, TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure><h2 id="9-4-常见的BlockingQueue"><a href="#9-4-常见的BlockingQueue" class="headerlink" title="9.4 常见的BlockingQueue"></a>9.4 常见的BlockingQueue</h2><h3 id="9-4-1-ArrayBlockingQueue（常用）"><a href="#9-4-1-ArrayBlockingQueue（常用）" class="headerlink" title="9.4.1 ArrayBlockingQueue（常用）"></a>9.4.1 ArrayBlockingQueue（常用）</h3><p>基于数组的阻塞队列实现,在ArrayBlockingQueue内部,维护了一个定长数组,以便缓存队列中的数据对象,这是一个常用的阻塞队列,除了一个定长数组外,ArrayBlockingQueue内部还保存着两个整形变量,分别标识着队列的头部和尾部在数组中的位置。</p><p>ArrayBlockingQueue在生产者放入数据和消费者获取数据,都是共用同一个锁对象,因此也意味着两者无法真正并行运行,这点尤其不同于LinkedBlockingQUeue;按照实现原理来分析,ArrayBlockingQueue完全可以采用分离锁,从而实现生产者和消费者操作的完全并行运行。Doung Lea之所以没这样去做,也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧,以至于引入独立的锁机制,除了给代码带来额外的复杂性外,其在性能上完全占不到任何便宜。ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于,前者在插入或删除元素时不会产生或销毁任何需要的对象实例,而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批数据的系统中，其对于GC的影响还是存在一定的区别。而在创建ArrayBlockingQueue时，我们还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</p><p><strong>&#x3D;&#x3D;一句话总结：由数组结构构成的有界阻塞队列。&#x3D;&#x3D;</strong></p><h3 id="9-4-2-LinkedBlockingQUeue-常用"><a href="#9-4-2-LinkedBlockingQUeue-常用" class="headerlink" title="9.4.2 LinkedBlockingQUeue(常用)"></a>9.4.2 LinkedBlockingQUeue(常用)</h3><p>基于链表的阻塞队列，同ArrayBlockingQueue类似，其内部也维持着一个数据缓冲队列（该队列有一个链表构成），当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQUeue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程才会被唤醒，反之对于消费者这端的处理也是基于同样的原理。而LinkedBlockingQUeue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高正鹅队列的并发性能。</p><p><strong>ArrayBlockingQueue和LinkedBlockingQUeue是两个最普通也是最常用的阻塞队列，一般情况下，在处理多线程间的生产者消费者问题，使用者两个足以。</strong></p><p><strong>&#x3D;&#x3D;一句话总结：由链表结构组成的有界（但大小默认值为integer.MAX_VALUE）阻塞队列。&#x3D;&#x3D;</strong></p><h3 id="9-4-3-DelayQueue"><a href="#9-4-3-DelayQueue" class="headerlink" title="9.4.3 DelayQueue"></a>9.4.3 DelayQueue</h3><p>DelayQueue 中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue 是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p><p>&#x3D;&#x3D;<strong>一句话总结: 使用优先级队列实现的延迟无界阻塞队列。</strong>&#x3D;&#x3D;</p><h3 id="9-4-4-PriorityBlockingQueue"><a href="#9-4-4-PriorityBlockingQueue" class="headerlink" title="9.4.4 PriorityBlockingQueue"></a>9.4.4 PriorityBlockingQueue</h3><p>基于优先级的阻塞队列（优先级的判断通过构造函数传入的 Compator 对象来决定），但需要注意的是 PriorityBlockingQueue 并<strong>不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者</strong>。</p><p>因此使用的时候要特别注意，<strong>生产者生产数据的速度绝对不能快于消费者消费数据的速度</strong>，否则时间一长，会最终耗尽所有的可用堆内存空间。</p><p>在实现 PriorityBlockingQueue 时，内部控制线程同步的锁采用的是<strong>公平锁</strong>。</p><p>&#x3D;&#x3D;<strong>一句话总结: 支持优先级排序的无界阻塞队列。</strong>&#x3D;&#x3D;</p><h3 id="9-4-5-SynchronousQueue"><a href="#9-4-5-SynchronousQueue" class="headerlink" title="9.4.5 SynchronousQueue"></a>9.4.5 SynchronousQueue</h3><p>一种无缓冲的等待队列，类似于无中介的直接交易，有点像原始社会中的生产者和消费者，生产者拿着产品去集市销售给产品的最终消费者，而消费者必须亲自去集市找到所要商品的直接生产者，如果一方没有找到合适的目标，那么对不起，大家都在集市等待。相对于有缓冲的 BlockingQueue 来说，少了一个中间经销商的环节（缓冲区），如果有经销商，生产者直接把产品批发给经销商，而无需在意经销商最终会将这些产品卖给那些消费者，由于经销商可以库存一部分商品，因此相对于直接交易模式，总体来说采用中间经销商的模式会吞吐量高一些（可以批量买卖）；但另一方面，又因为经销商的引入，使得产品从生产者到消费者中间增加了额外的交易环节，单个产品的及时响应性能可能会降低。</p><p>声明一个 SynchronousQueue 有两种不同的方式，它们之间有着不太一样的行为</p><p><strong>公平模式和非公平模式的区别:</strong> </p><ul><li>公平模式：SynchronousQueue 会采用公平锁，并配合一个 FIFO 队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；</li><li>非公平模式（SynchronousQueue 默认）：SynchronousQueue 采用非公平锁，同时配合一个 LIFO 队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</li></ul><p>&#x3D;&#x3D;<strong>一句话总结: 不存储元素的阻塞队列，也即单个元素的队列。</strong>&#x3D;&#x3D;</p><h3 id="9-4-6-LinkedTransferQueue"><a href="#9-4-6-LinkedTransferQueue" class="headerlink" title="9.4.6 LinkedTransferQueue"></a>9.4.6 LinkedTransferQueue</h3><p>LinkedTransferQueue 是一个由链表结构组成的无界阻塞 TransferQueue 队列。相对于其他阻塞队列，LinkedTransferQueue 多了 tryTransfer 和transfer 方法。</p><p>LinkedTransferQueue 采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为 null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为 null 的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。</p><p>&#x3D;&#x3D;<strong>一句话总结: 由链表组成的无界阻塞队列。</strong>&#x3D;&#x3D;</p><h3 id="9-4-7-LinkedBlockingDeque"><a href="#9-4-7-LinkedBlockingDeque" class="headerlink" title="9.4.7 LinkedBlockingDeque"></a>9.4.7 LinkedBlockingDeque</h3><p>LinkedBlockingDeque 是一个由链表结构组成的双向阻塞队列，即可以从队列的两端插入和移除元素。</p><p>对于一些指定的操作，在插入或者获取队列元素时如果队列状态不允许该操作可能会阻塞住该线程直到队列状态变更为允许操作，这里的阻塞一般有两种情况 </p><ul><li>插入元素时: 如果当前队列已满将会进入阻塞状态，一直等到队列有空的位置时再将该元素插入，该操作可以通过设置超时参数，超时后返回 false 表示操作失败，也可以不设置超时参数一直阻塞，中断后抛出 InterruptedException异 常 </li><li>读取元素时: 如果当前队列为空会阻塞住直到队列不为空然后返回元素，同样可以通过设置超时参数</li></ul><p>&#x3D;&#x3D; <strong>一句话总结：由链表组成的双向阻塞队列</strong>&#x3D;&#x3D;</p><h2 id="9-5-小结"><a href="#9-5-小结" class="headerlink" title="9.5 小结"></a>9.5 小结</h2><p>1.在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一但条件满足，被挂起的线程又回自动被唤起。</p><p>2.为什么需要BlockingQueue？在Concurrent包发布以前，在多线程环境下，我们每个程序员都必须自己去控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。使用后我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了。</p>]]></content>
      
      
      <categories>
          
          <category> 阻塞队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阻塞队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程八(读写锁)</title>
      <link href="/post/3561ecc6.html"/>
      <url>/post/3561ecc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-读写锁"><a href="#8-读写锁" class="headerlink" title="8 读写锁"></a>8 读写锁</h1><h2 id="8-1-读写锁"><a href="#8-1-读写锁" class="headerlink" title="8.1 读写锁"></a>8.1 读写锁</h2><p>现实中有这样一种场景：对共享资源有读和写的操作，且写操作没有读操作那么频繁。在没有写操作的时候，多个线程同时读一个资源没有任何问题，所以应该允许多个线程同时读取共享资源；但是如果一个线程想去写这些共享资源，就不应该允许其他线程对该资源进行读和写的操作了。</p><p>针对这种场景：<strong>JAVA的并发包提供了读写锁ReentrantReadWriteLock，它表示两个锁，一个是读操作相关的锁，称为共享锁；一个是写相关的锁，称为排他锁</strong></p><p>1.线程进入读锁的前提：</p><ul><li>没有其他线程的写锁</li><li>没有写请求，或者&#x3D;&#x3D;有写请求，但调用线程和持有锁的线程是同一个(可重入锁)。&#x3D;&#x3D;</li></ul><p>2.线程进入写锁的前提条件：</p><ul><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ul><p>而读写锁有以下三个重要的特性：</p><p>（1）公平选择性：支持非公平（默认）和公平锁的获取方式，吞吐量还是非公平优于公平。</p><p>（2）重进入：读锁和写锁都支持线程重进入。</p><p>（3）锁降级：遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级成为读锁。</p><h2 id="8-2-ReentrantReadWriteLock"><a href="#8-2-ReentrantReadWriteLock" class="headerlink" title="8.2 ReentrantReadWriteLock"></a>8.2 ReentrantReadWriteLock</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantReadWriteLock</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ReadWriteLock</span>, java.io.Serializable &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/** readlock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line">    <span class="comment">/**  writelock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line">    <span class="comment">/** Performs all synchronization mechanics */</span></span><br><span class="line">    <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  使用默认（非公平）的排序属性创建一个新的</span></span><br><span class="line"><span class="comment">ReentrantReadWriteLock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用给定的公平策略创建一个新的 ReentrantReadWriteLock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">        readerLock = <span class="keyword">new</span> <span class="title class_">ReadLock</span>(<span class="built_in">this</span>);</span><br><span class="line">        writerLock = <span class="keyword">new</span> <span class="title class_">WriteLock</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 返回用于写操作的锁**/</span></span><br><span class="line">    <span class="keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="title function_">writeLock</span><span class="params">()</span> &#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line">  <span class="comment">/** 返回用于读操作的锁**/</span></span><br><span class="line">  <span class="keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="title function_">readLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> readerLock; &#125;</span><br><span class="line"> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReadLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WriteLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，ReentrantReadWriteLock实现了ReadWriteLock接口，ReadWriteLock接口定义了获取读锁和写锁的规范，具体需要实现类去实现；同时其还实现了Serializable接口，表示可以进行序列化，在源代码中可以看到ReentrantReadWriteLock实现了自己的序列化逻辑。</p><h2 id="8-3-入门案例"><a href="#8-3-入门案例" class="headerlink" title="8.3 入门案例"></a>8.3 入门案例</h2><p><strong>场景：使用ReentrantReadWriteLock对一个hashmap进行读和写操作</strong></p><h2 id="8-4-小节（重要）"><a href="#8-4-小节（重要）" class="headerlink" title="8.4 小节（重要）"></a>8.4 小节（重要）</h2><ul><li><p>在线程持有锁的情况下，该线程不能取得写锁(因为获取写锁的时候，如果发现当前的读锁被占用，就马上获取失败，不管读锁是不是被当前线程持有)。</p></li><li><p>在线程持有写锁的情况下，该线程可以继续获取读锁(获取读锁时，如果发现写锁被占用，只有写锁没有被当前线程占有的情况下才会获取失败)。</p><p>原因：当线程获取读锁的时候，可能有其他线程同时也值啊持有读锁，因此不能把获取读锁的线程“升级”为写锁；而对于获得写锁的进程，它一定独占了读写锁，因此可以继续让他获取读锁，当它同时获取了写锁和读锁后，还可以先释放写锁继续持有读锁，这样一个写锁就“降级”为了读锁。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读写锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读写锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程七(JUC三大辅助类)</title>
      <link href="/post/a33e7f8f.html"/>
      <url>/post/a33e7f8f.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-JUC三大辅助类"><a href="#7-JUC三大辅助类" class="headerlink" title="7 JUC三大辅助类"></a>7 JUC三大辅助类</h1><p>JUC中提供了三种常用的辅助类，通过这些辅助类可以很好的解决线程数量过多时Lock锁的频繁操作。但三种辅助类为：</p><ul><li>CountDounLatch：减少计算</li><li>CyclicBarrier：循环栅栏</li><li>Semaphore：信号灯</li></ul><h2 id="7-1-减少计数CountDownLatch"><a href="#7-1-减少计数CountDownLatch" class="headerlink" title="7.1 减少计数CountDownLatch"></a>7.1 减少计数CountDownLatch</h2><p>CountDownLatch 类可以设置一个计数器，然后通过 countDown 方法来进行减 1 的操作，使用 await 方法等待计数器不大于 0，然后继续执行 await 方法之后的语句。</p><ul><li>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，这些线程会阻塞</li><li>其他线程调用countDown方法会将计数器减1（调用countDown方法的线程不会阻塞）</li><li>当技术器的值变为0时，因await方法阻塞的线程会被唤醒，继续执行</li></ul><p><strong>场景：6个同学陆续离开教室后同学才可以关门。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 定义一个数值为6的计数器</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">downLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建6个同学</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>((()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!Thread.currentThread().getName().equals(<span class="string">&quot;同学6&quot;</span>))&#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">6</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;离开了&quot;</span>);</span><br><span class="line">                    <span class="comment">// 计数器减1不会阻塞</span></span><br><span class="line">                    downLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),<span class="string">&quot;同学&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程await休息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程睡觉&quot;</span>);</span><br><span class="line">        downLatch.await();</span><br><span class="line">        <span class="comment">// 全部离开后，自动唤醒主线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;全部离开了，现在的计数器为&quot;</span>+downLatch.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-循环栅栏CyclicBarrier"><a href="#7-2-循环栅栏CyclicBarrier" class="headerlink" title="7.2 循环栅栏CyclicBarrier"></a>7.2 循环栅栏CyclicBarrier</h2><p>CyclicBarrier 看英文单词可以看出大概就是循环阻塞的意思，在使用中CyclicBarrier 的构造方法第一个参数是目标障碍数，每次执行 CyclicBarrier 一次障碍数会加一，如果达到了目标障碍数，才会执行 cyclicBarrier.await()之后的语句。可以将 CyclicBarrier 理解为加 1 操作</p><p><strong>场景：集齐7颗龙珠就可以召唤神龙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line">    <span class="comment">// 定义召唤神龙需要的龙珠数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义循环栅栏</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(NUMBER, () -&gt;</span><br><span class="line">            System.out.println(<span class="string">&quot;集齐&quot;</span>+NUMBER+<span class="string">&quot;颗龙珠，现在准备召唤神龙！！！&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义七个线程分别去收集龙珠</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;龙珠3号&quot;</span>))&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;龙珠3号抢夺战开始，孙悟空开启超级赛亚人模式！&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;龙珠3号抢夺战结束，孙悟空答应了，孙悟空拿到了3号龙珠！！&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;收集到了！！！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">&quot;龙珠&quot;</span>+i+<span class="string">&quot;号&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-信号灯"><a href="#7-3-信号灯" class="headerlink" title="7.3 信号灯"></a>7.3 信号灯</h2><p>Semaphore的构造方法中传入的第一个参数时最大信号量（可以看成最大线程），每个信号量初始化为一个最多只能分发一个许可证。使用acquire方法获得许可证，release方法释放许可</p><p>场景：抢车位，6部汽车3个停车位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义3个停车位</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 模拟6辆汽车停车</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;找车位ing&quot;</span>);</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;汽车停车成功！&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;溜了溜了&quot;</span>);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">&quot;汽车&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JUC三大辅助类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC三大辅助类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程六(Callable&amp;Future接口)</title>
      <link href="/post/c840683c.html"/>
      <url>/post/c840683c.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-Callable-amp-Future接口"><a href="#6-Callable-amp-Future接口" class="headerlink" title="6.Callable&amp;Future接口"></a>6.Callable&amp;Future接口</h1><h2 id="6-1-Callable-接口"><a href="#6-1-Callable-接口" class="headerlink" title="6.1 Callable 接口"></a>6.1 Callable 接口</h2><p>有两种创建线程的方法-一种是通过创建 Thread 类，另一种是通过使用 Runnable 创建线程。但是，Runnable 缺少的一项功能是，当线程终止时（即 run（）完成时），我们无法使线程返回结果。为了支持此功能，Java 中提供了 Callable 接口。</p><p>&#x3D;&#x3D;<strong>现在我们学习的是创建线程的第三种方案—Callable 接口&#x3D;&#x3D;</strong></p><p><strong>Callable 接口的特点如下(重点)</strong></p><ul><li>为了实现Runnable，需要实现不反悔任何内容的run( )方法，而对于Callable，需要实现在完成时返回结果的call( )方法。</li><li>call( )方法可以引发异常，而run( )则不能。</li><li>为实现Callable而必须实现call方法</li><li>不能直接替换runnable，因为Thread类的构造方法根本没有Callable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">创建新类 MyThread 实现 runnable 接口</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">新类 MyThread2 实现 callable 接口</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">200</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-Future接口"><a href="#6-2-Future接口" class="headerlink" title="6.2 Future接口"></a>6.2 Future接口</h2><p>当call( )方法完成时，结果必须存储在主线程已知的对象中，以便主线程可以知道该线程返回的结果。为此，可以使用Future对象。将Future视为保存结果的对象-它可能暂时不保存结果，当将来会保存（一旦Callable返回）。Future基本上是主线程可以跟踪进度以及其它线程的结果的一种方式。要实现此接口，必须重写5种方法，这里列出了重要的方法，如下：</p><ul><li><p>public boolean cancel(boolean mayInterruptIfRunning) :用于停止任务。</p><p>&#x3D;&#x3D;如果任务尚未启动，它将停止任务。如果已启动，则仅在mayInterrupt为true时才会中断任务。&#x3D;&#x3D;</p></li><li><p>public Object get() 抛出InterruptedException, ExecutionException用于获取任务的结果。</p><p>&#x3D;&#x3D;如果任务完成，它将立即返回结果，否则将等待任务完成，然后返回结果。&#x3D;&#x3D;</p></li><li><p>public boolean isDone() :如果任务完成，则返回true，否则返回false</p><p>可以看到Callable和Future做两件事- Callable与Runnable类似，因为它封装了要在另一个线程上运行的任务，而Future用于存储从另一个线程获得的结果。实际上，future也可以与Runnable一起使用。</p><p>要创建线程，需要Runnable。为了获取结果，需要future。</p></li></ul><h2 id="6-3-FutureTask"><a href="#6-3-FutureTask" class="headerlink" title="6.3 FutureTask"></a>6.3 FutureTask</h2><p>Java 库具有具体的 FutureTask 类型，该类型实现 Runnable 和 Future，并方便地将两种功能组合在一起。 可以通过为其构造函数提供 Callable 来创建FutureTask。然后，将 FutureTask 对象提供给 Thread 的构造函数以创建Thread 对象。因此，间接地使用 Callable 创建线程。</p><p><strong>核心原理:(重点)</strong></p><p>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给Future对象在后台完成</p><ul><li>当主线程将来需要时，就可以通过Future对象获得后台作业的计算结果或者执行状态</li><li>一般FutureTask多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。</li><li>仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞get方法</li><li>一旦计算完成，就不能再重新开始或取消计算</li><li>get方法而获取结果只有在计算完成时获取，否则会一直阻塞知道任务转入完成状态，然后会返回结果或者抛出异常</li><li>get只计算一次，因此get方法放到最后</li></ul><h2 id="6-4-使用Callable和Future"><a href="#6-4-使用Callable和Future" class="headerlink" title="6.4 使用Callable和Future"></a>6.4 使用Callable和Future</h2><h2 id="6-5-小结-重点"><a href="#6-5-小结-重点" class="headerlink" title="6.5 小结(重点)"></a>6.5 小结(重点)</h2><ul><li>在主线程中需要执行比较耗时的操作时，但有不想阻塞主线程时，可以把这些作业交给Future对象在后台完成。当主线程将来需要时，就可以通过Future对象获得后台作业的计算结果或者执行状态</li><li>一般FutureTask多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果</li><li>仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞get方法。一旦计算完成，就不能再重新开始或取消计算。get方法而获取结果只有在计算完成时获取，否则会一直折射知道任务转入完成状态，然后会返回结果或者抛出异常。</li><li>只计算一次结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> Callable&amp;Future </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Callable&amp;Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程五(多线程锁)</title>
      <link href="/post/c5692206.html"/>
      <url>/post/c5692206.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-多线程锁"><a href="#5-多线程锁" class="headerlink" title="5 多线程锁"></a>5 多线程锁</h1><h2 id="5-1-锁的八个问题演示"><a href="#5-1-锁的八个问题演示" class="headerlink" title="5.1 锁的八个问题演示"></a>5.1 锁的八个问题演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//停留 4 秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------getHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1 标准访问，先打印短信还是邮件</span><br><span class="line">------sendSMS</span><br><span class="line">------sendEmail</span><br><span class="line">2 停 4 秒在短信方法内，先打印短信还是邮件</span><br><span class="line">------sendSMS</span><br><span class="line">------sendEmail</span><br><span class="line">3 新增普通的 hello 方法，是先打短信还是 hello</span><br><span class="line">------getHello</span><br><span class="line">------sendSMS</span><br><span class="line">4 现在有两部手机，先打印短信还是邮件</span><br><span class="line">------sendEmail</span><br><span class="line">------sendSMS</span><br><span class="line">5 两个静态同步方法，1 部手机，先打印短信还是邮件</span><br><span class="line">------sendSMS</span><br><span class="line">------sendEmail</span><br><span class="line">6 两个静态同步方法，2 部手机，先打印短信还是邮件</span><br><span class="line">------sendSMS</span><br><span class="line">------sendEmail</span><br><span class="line">7 1 个静态同步方法,1 个普通同步方法，1 部手机，先打印短信还是邮件</span><br><span class="line">------sendEmail</span><br><span class="line">------sendSMS</span><br><span class="line">8 1 个静态同步方法,1 个普通同步方法，2 部手机，先打印短信还是邮件</span><br><span class="line">------sendEmail</span><br><span class="line">------sendSMS</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：</p><p>一个对象里面如果有多个synchronized方法，某一时刻内，只要一个线程去调用其中的一个synchronized方法了，其它的线程智能等待，换句话说，某一个时刻内，只能有唯一一个线程去访问这些synchronized方法</p><p>锁的是当前对象this，被锁定后，其它的线程都不能进入到当前对象的其他synchronized方法</p><p>加个普通方法后发现和同步锁无关</p><p>换成两个对象后，不是同一把锁了，情况立刻变化。</p><p>synchronized实现同步的基础：Java中的每一个对象都可以作为锁。</p><p><strong>具体表现为以下3种形式。</strong></p><p><strong>对于普通同步方法，锁是当前实例对象。</strong></p><p><strong>对于静态同步方法，锁是当前类的Class对象。</strong></p><p><strong>对于同步方法块，锁是synchronized括号里配置的对象</strong></p><p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。也就是说如果一个实例对象的非静态同步方法获取锁后，该实例对象的其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁，可是别的实例对象的非静态同步方法因为跟该实例对象的非静态同步方法用的是不同的锁，所以毋须等待该实例对象已获取锁的非静态同步方法释放锁就可以获取他们自己的锁。所有的静态同步方法用的也是同一把锁——类对象本身，这两把锁是两个不同的对象，所以静态同步方法与非静态同步方法之间是不会有竞态条件的。但是一旦一个静态同步方法获取锁后，其他的静态同步方法都必须等待该方法释放锁后才能获取锁，而不管是同一个实例对象的静态同步方法之间，还是不同的实例对象的静态同步方法之间，只要它们同一个类的实例对象！</p><h2 id="5-2-公平锁和非公平锁"><a href="#5-2-公平锁和非公平锁" class="headerlink" title="5.2 公平锁和非公平锁"></a>5.2 公平锁和非公平锁</h2><p><strong>非公平锁</strong>：线程饿死，效率高</p><p><strong>公平锁</strong>：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁（线程争夺cpu，效率低）</p><h2 id="5-3-可重入锁和不可重入锁"><a href="#5-3-可重入锁和不可重入锁" class="headerlink" title="5.3 可重入锁和不可重入锁"></a>5.3 可重入锁和不可重入锁</h2><p><strong>可重入锁</strong>：synchronized（隐式，jvm层面上锁和解锁）和Lock（显示）都是可重入锁。</p><p>可重入锁也叫递归锁，指的是以线程为单位，当一个线程获取对象锁之后，这个线程可以再次获取本对象上的锁，而其他的线程是不可以的</p><p><strong>不可重入锁</strong>：所谓不可重入锁，即若当前线程执行某个方法已经获取了该锁，那么在方法中尝试再次获取锁时，就会获取不到被阻塞。（同一把锁）</p><h2 id="5-4-死锁"><a href="#5-4-死锁" class="headerlink" title="5.4 死锁"></a>5.4 死锁</h2><p><strong>1.什么是死锁？</strong></p><p>两个或者两个以上进程在执行过程中，因为争夺资源二造成一种互相等待的现象，如果没有外力干涉，它们就无法再执行下去。</p><p><strong>2.产生死锁的原因？（线程互斥、请求保持、循环等待）</strong></p><ul><li>第一 系统资源不足</li><li>第二 进程运行推进顺序不合适</li><li>第三 资源分配不当</li></ul><p>3.验证是否死锁</p><p>（1）jps -l 类似Linux ps -ef </p><p>（2）jstack jvm自带堆栈跟踪工具</p><h2 id="5-5-乐观锁和悲观锁"><a href="#5-5-乐观锁和悲观锁" class="headerlink" title="5.5 乐观锁和悲观锁"></a>5.5 乐观锁和悲观锁</h2><h2 id="5-6-自旋锁"><a href="#5-6-自旋锁" class="headerlink" title="5.6 自旋锁"></a>5.6 自旋锁</h2><h2 id="5-7-独占锁与共享锁"><a href="#5-7-独占锁与共享锁" class="headerlink" title="5.7 独占锁与共享锁"></a>5.7 独占锁与共享锁</h2><h2 id="5-8-读写锁"><a href="#5-8-读写锁" class="headerlink" title="5.8 读写锁"></a>5.8 读写锁</h2><h2 id="5-9-同步锁-互斥锁"><a href="#5-9-同步锁-互斥锁" class="headerlink" title="5.9 同步锁(互斥锁)"></a>5.9 同步锁(互斥锁)</h2>]]></content>
      
      
      <categories>
          
          <category> 多线程锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程四(集合的线程安全)</title>
      <link href="/post/9c856055.html"/>
      <url>/post/9c856055.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-集合的线程安全"><a href="#4-集合的线程安全" class="headerlink" title="4 集合的线程安全"></a>4 集合的线程安全</h1><h2 id="4-1-集合操作Demo"><a href="#4-1-集合操作Demo" class="headerlink" title="4.1 集合操作Demo"></a>4.1 集合操作Demo</h2><p>NotSafeDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassNotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常类容</p><p>java.util.ConcurrentModificationException</p><p><strong>问题: 为什么会出现并发修改异常?</strong></p><p>查看 ArrayList 的 add 方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>那么我们如何去解决 List 类型的线程安全问题?</strong>&#x3D;&#x3D;</p><h2 id="3-2-Vector"><a href="#3-2-Vector" class="headerlink" title="3.2 Vector"></a>3.2 Vector</h2><p><strong>Vecto</strong>是<strong>矢量队列</strong>，它是JDK1.0版本添加的类。继承于 AbstractList，实现</p><p>了 List, RandomAccess, Cloneable 这些接口。 Vector 继承了 AbstractList，</p><p>实现了 List；所以，<strong>它是一个队列，支持相关的添加、删除、修改、遍历等功能</strong>。 Vector 实现了 RandmoAccess 接口，即<strong>提供了随机访问功能</strong>。RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在Vector 中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。 Vector 实现了 Cloneable 接口，即实现 clone()函数。它能被克隆。</p><p><strong>&#x3D;&#x3D;和 ArrayList 不同，Vector 中的操作是线程安全的。&#x3D;&#x3D;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassNotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在没有运行出现并发异常,为什么?</strong></p><p>查看 Vector 的 add 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this Vector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this Vector</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>add方法被synchronized同步修饰，线程安全！因此没有并发异常</strong></p><h2 id="4-3-Collections"><a href="#4-3-Collections" class="headerlink" title="4.3 Collections"></a>4.3 Collections</h2><p>Collections提供了方法synchronizedList保证list是同步线程安全的</p><p>NotSafeDemo代码修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassNotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有并发修改异常</p><p>查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a synchronized (thread-safe) list backed by the specified</span></span><br><span class="line"><span class="comment">     * list.  In order to guarantee serial access, it is critical that</span></span><br><span class="line"><span class="comment">     * &lt;strong&gt;all&lt;/strong&gt; access to the backing list is accomplished</span></span><br><span class="line"><span class="comment">     * through the returned list.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * It is imperative that the user manually synchronize on the returned</span></span><br><span class="line"><span class="comment">     * list when iterating over it:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *  List list = Collections.synchronizedList(new ArrayList());</span></span><br><span class="line"><span class="comment">     *      ...</span></span><br><span class="line"><span class="comment">     *  synchronized (list) &#123;</span></span><br><span class="line"><span class="comment">     *      Iterator i = list.iterator(); // Must be in synchronized block</span></span><br><span class="line"><span class="comment">     *      while (i.hasNext())</span></span><br><span class="line"><span class="comment">     *          foo(i.next());</span></span><br><span class="line"><span class="comment">     *  &#125;</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * Failure to follow this advice may result in non-deterministic behavior.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned list will be serializable if the specified list is</span></span><br><span class="line"><span class="comment">     * serializable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  list the list to be &quot;wrapped&quot; in a synchronized list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a synchronized view of the specified list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">synchronizedList</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (list <span class="keyword">instanceof</span> RandomAccess ?</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SynchronizedRandomAccessList</span>&lt;&gt;(list) :</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SynchronizedList</span>&lt;&gt;(list));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-CopyOnWriteArrayList-重点"><a href="#4-4-CopyOnWriteArrayList-重点" class="headerlink" title="4.4 CopyOnWriteArrayList(重点)"></a>4.4 CopyOnWriteArrayList(重点)</h2><p>首先我们对CopyOnWriteArrayList进行学习，其特点如下：</p><p>它相当于线程安全的ArrayList。和ArrayList一样，它是个可变数组；但是和ArrayList不同的是，它具有以下特征：</p><p>1.它最适合于具有以下特征的应用程序：List 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。</p><p>2.它是线程安全的。</p><p>3.因为通常需要复制整个基础数组，所以可变操作（ad d()、set()和remove()等等）的开销很大。</p><p>4.迭代器支持hasNext()，next()等不可变操作，但不支持可变remove()等操作。</p><p>5.使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖不变的数组快照。</p><p><strong>1.独占锁效率低：采用读写分离思想</strong></p><p><strong>2.写线程获取到锁，其他线程阻塞。</strong></p><p><strong>3.赋值思想：</strong></p><p>当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><p><strong>这时候会抛出来一个新的问题，也就是数据不一致的问题。如果写线程还没来得及写会内存，其他的线程就会读到了脏数据。</strong></p><p>&#x3D;&#x3D;<strong>这就是 CopyOnWriteArrayList 的思想和原理。就是拷贝一份。</strong>&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassNotSafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有线程安全问题</p><p><strong>原因分析</strong>(<strong>重点</strong>):&#x3D;&#x3D;<strong>动态数组与线程安全</strong>&#x3D;&#x3D;</p><p>下面从“动态数组”和“线程安全”两个方面进一步对CopyOnWriteArrayList的原理进行说明。</p><ul><li><strong>“动态数组”机制</strong></li><li>它内部有个“volatile数组”(array)来保持数据。在“添加&#x2F;修改&#x2F;删除”数据时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该数组赋值给“volatile 数组”, 这就是它叫做CopyOnWriteArrayList 的原因</li><li><strong>由于它在“添加&#x2F;修改&#x2F;删除”数据时，都会新建数组，所以涉及到修改数据的操作，CopyOnWriteArrayList效率很低；但是单单只是进行遍历查找的话，效率比较高。</strong></li><li><strong>“线程安全”机制</strong></li><li>通过 volatile 和互斥锁来实现的。</li><li>通过“volatile 数组”来保存数据的。一个线程读取 volatile 数组时，总能看到其它线程对该 volatile 变量最后的写入；就这样，通过 volatile 提供了“读取到的数据总是最新的”这个机制的保证。</li><li>通过互斥锁来保护数据。在“添加&#x2F;修改&#x2F;删除”数据时，会先“获取互斥锁”，再修改完毕之后，先将数据更新到“volatile 数组”中，然后再“释放互斥锁”，就达到了保护数据的目的。</li></ul><h2 id="4-5-小结（重点）"><a href="#4-5-小结（重点）" class="headerlink" title="4.5 小结（重点）"></a>4.5 小结（重点）</h2><p><strong>1.线程安全与线程不安全集合</strong></p><p>集合类型中存在线程安全和线程不安全的两种，常见例如：</p><p>ArrayList —– Vector</p><p>HashMap —– HashTable</p><p>但是以上都是通过synchronized关键字实现，效率较低</p><p><strong>2.Colletions构建的线程安全集合</strong></p><p><strong>3.java.util.concurrent并发包下</strong></p><p>CopyOnWriteArrayList CopyOnWriteArraySet ConcurrentHashMap类型，通过动态数组与线程安全保证各方面保证线程安全</p>]]></content>
      
      
      <categories>
          
          <category> 线程安全的集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程安全的集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程三(线程间通信)</title>
      <link href="/post/5d1a52e7.html"/>
      <url>/post/5d1a52e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-线程间通信"><a href="#3-线程间通信" class="headerlink" title="3 线程间通信"></a>3 线程间通信</h1><p>线程间通信的模型有两种：共享内存和消息传递，以下方式都是基于这两种模型来实现的。我们来基于一道常见的面试题目来分析</p><p><strong>场景–两个线程，一个线程对当前数值加1，另一个线程对当前数值减1，要求用线程间通信</strong></p><h2 id="3-1-synchronized方案"><a href="#3-1-synchronized方案" class="headerlink" title="3.1 synchronized方案"></a>3.1 synchronized方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DemoClass</span> <span class="variable">demoClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoClass</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                demoClass.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                demoClass.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加减对象</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加1操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number !=<span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            number ++;</span><br><span class="line">            System.out.println(<span class="string">&quot;---&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;加1的结果为：&quot;</span>+number+<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减一操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number ==<span class="number">0</span> )&#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            number --;</span><br><span class="line">            System.out.println(<span class="string">&quot;---&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;减1的结果为：&quot;</span>+number+<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-Lock方案"><a href="#3-2-Lock方案" class="headerlink" title="3.2 Lock方案"></a>3.2 Lock方案</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>&#123;</span><br><span class="line">    <span class="comment">// 加减对象</span></span><br><span class="line">    private int number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明锁</span></span><br><span class="line">    private <span class="title class_">Lock</span> lock = <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明钥匙</span></span><br><span class="line">    private <span class="title class_">Condition</span> condition = lock.<span class="title function_">newCondition</span>();</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.<span class="title function_">lock</span>();</span><br><span class="line">            <span class="keyword">while</span> (number !=<span class="number">0</span>)&#123;</span><br><span class="line">                condition.<span class="title function_">await</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            number ++;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;---&quot;</span>+<span class="title class_">Thread</span>.<span class="title function_">currentThread</span>().<span class="title function_">getName</span>()+<span class="string">&quot;加1的结果为：&quot;</span>+number+<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            condition.<span class="title function_">signalAll</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">InterruptedException</span> e) &#123;</span><br><span class="line">            e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.<span class="title function_">unlock</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">decrement</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.<span class="title function_">lock</span>();</span><br><span class="line">            <span class="keyword">while</span> (number ==<span class="number">0</span>)&#123;</span><br><span class="line">                condition.<span class="title function_">await</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            number --;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;---&quot;</span>+<span class="title class_">Thread</span>.<span class="title function_">currentThread</span>().<span class="title function_">getName</span>()+<span class="string">&quot;减1的结果为：&quot;</span>+number+<span class="string">&quot;---&quot;</span>);</span><br><span class="line">            condition.<span class="title function_">signalAll</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">InterruptedException</span> e) &#123;</span><br><span class="line">            e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.<span class="title function_">unlock</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-线程间定制化通信"><a href="#3-4-线程间定制化通信" class="headerlink" title="3.4 线程间定制化通信"></a>3.4 线程间定制化通信</h2><h3 id="3-4-1-案例介绍"><a href="#3-4-1-案例介绍" class="headerlink" title="3.4.1 案例介绍"></a>3.4.1 案例介绍</h3><p><strong>&#x3D;&#x3D;问题：A线程打印五次A，B线程打印10次B，C线程打印15次C，按照此顺序循环10轮&#x3D;&#x3D;</strong></p><h3 id="3-4-2-实现流程"><a href="#3-4-2-实现流程" class="headerlink" title="3.4.2 实现流程"></a>3.4.2 实现流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通信对象 A：打印A B:打印B C:打印C</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">CODE</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明钥匙A</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionA</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明钥匙B</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionB</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明钥匙C</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionC</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (!CODE.equals(<span class="string">&quot;A&quot;</span>))&#123;</span><br><span class="line">                conditionA.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CODE = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">            conditionB.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (!CODE.equals(<span class="string">&quot;B&quot;</span>))&#123;</span><br><span class="line">                conditionB.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CODE = <span class="string">&quot;C&quot;</span>;</span><br><span class="line">            conditionC.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (!CODE.equals(<span class="string">&quot;C&quot;</span>))&#123;</span><br><span class="line">                conditionC.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CODE = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">            conditionA.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sychronized实现同步的基础：Java中的每一个对象都可以作为锁，具体表现为以下三种方式。</strong></p><ul><li><p>对于普通同步方法，锁是当前实例对象。</p></li><li><p>对于静态同步方法，锁是当前类的Class对象</p></li><li><p>对于同步方法块，锁是Synchronized括号里配置的对象</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 线程间通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程间通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程二(Lock接口)</title>
      <link href="/post/2d8eead2.html"/>
      <url>/post/2d8eead2.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-Lock接口"><a href="#2-Lock接口" class="headerlink" title="2 Lock接口"></a>2 Lock接口</h1><h2 id="2-1-Synchronized"><a href="#2-1-Synchronized" class="headerlink" title="2.1 Synchronized"></a>2.1 Synchronized</h2><h3 id="2-1-1-Synchronized关键字"><a href="#2-1-1-Synchronized关键字" class="headerlink" title="2.1.1 Synchronized关键字"></a>2.1.1 Synchronized关键字</h3><p><strong>Synchronized 是Java中的关键字，是一种同步锁。它修饰的对象有以下几种</strong>：</p><ol><li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</li><li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；<br>虽然可以使用 synchronized 来定义方法，但 synchronized 并不属于方法定义的一部分，因此，synchronized 关键字不能被继承。如果在父类中的某个方法使用了 synchronized 关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上synchronized 关键字才可以。当然,还可以在子类方法中调用父类中相应的方法，这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此,子类的方法也就相当于同步了。</li><li>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</li><li>修饰一个类，其作用的范围是 synchronized 后面括号括起来的部分，作用主要的对象是这个类的所有对象。</li></ol><h3 id="2-1-2售票案例"><a href="#2-1-2售票案例" class="headerlink" title="2.1.2售票案例"></a>2.1.2售票案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"> <span class="comment">//票数</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"> <span class="comment">//操作方法：卖票</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//判断：是否有票</span></span><br><span class="line"> <span class="keyword">if</span>(number &gt; <span class="number">0</span>) &#123;</span><br><span class="line"> System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : </span></span><br><span class="line"><span class="string">&quot;</span>+(number--)+<span class="string">&quot; &quot;</span>+number);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>如果一个代码块被 synchronized 修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况</strong>：</p><p>1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</p><p> 2）线程执行发生异常，此时 JVM 会让线程自动释放锁。</p><p>那么如果这个获取锁的线程由于要等待 IO 或者其他原因（比如调用 sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。</p><p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过 Lock 就可以办到。</p><h2 id="2-2-什么是Lock"><a href="#2-2-什么是Lock" class="headerlink" title="2.2 什么是Lock"></a>2.2 什么是Lock</h2><p><strong>Lock 锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对象。Lock 提供了比 synchronized 更多的功能</strong>。</p><p><strong>Lock与Synchronized的区别</strong>：</p><p>• Lock 不是 Java 语言内置的，synchronized 是 Java 语言的关键字，因此是内置特性。Lock 是一个类，通过这个类可以实现同步访问；</p><p>• Lock 和 synchronized 有一点非常大的不同，采用 synchronized 不需要用户去手动释放锁，当 synchronized 方法或者 synchronized 代码块执行完之后，系统会自动让线程释放对锁的占用；而 Lock 则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</p><h3 id="2-2-1Lock接口"><a href="#2-2-1Lock接口" class="headerlink" title="2.2.1Lock接口"></a>2.2.1Lock接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面来逐个讲述Lock接口中每个方法的使用。</strong></p><h3 id="2-2-2-lock"><a href="#2-2-2-lock" class="headerlink" title="2.2.2 lock"></a>2.2.2 lock</h3><p><strong>lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。采用 Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用 Lock 必须在 try{}catch{}块中进行，并且将释放锁的操作放在finally 块中进行，以保证锁一定被被释放，防止死锁的发生。通常使用 Lock来进行同步的话，是以下面这种形式去使用的：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-newCondition"><a href="#2-2-3-newCondition" class="headerlink" title="2.2.3 newCondition"></a>2.2.3 newCondition</h3><p>关键字 synchronized 与 wait()&#x2F;notify()这两个方法一起使用可以实现等待&#x2F;通知模式， Lock 锁的 newContition()方法返回 Condition 对象，Condition 类也可以实现等待&#x2F;通知模式。</p><p>用 notify()通知时，JVM 会随机唤醒某个等待的线程， 使用 Condition 类可以进行选择性通知， Condition 比较常用的两个方法：</p><p>• await()会使当前线程等待,同时会释放锁,当其他线程调用 signal()时,线程会重新获得锁并继续执行。</p><p>• signal()用于唤醒一个等待的线程。</p><p>&#x3D;&#x3D;注意：在调用 Condition 的 await()&#x2F;signal()方法前，也需要线程持有相关的 Lock 锁，调用 await()后线程会释放这个锁，在 singal()调用后会从当前</p><p>Condition 对象的等待队列中，唤醒 一个线程，唤醒的线程尝试获得锁， 一旦获得锁成功就继续执行。&#x3D;&#x3D;</p><h2 id="2-3ReentrantLock"><a href="#2-3ReentrantLock" class="headerlink" title="2.3ReentrantLock"></a>2.3ReentrantLock</h2><p>ReentrantLock，意思是“可重入锁”，关于可重入锁的概念将在后面讲述。</p><p>ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。下面通过一些实例具体看一下如何使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">//注意这个地方</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(thread.getName() + <span class="string">&quot;得到了锁&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                arrayList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(thread.getName() + <span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-ReadWriteLock"><a href="#2-4-ReadWriteLock" class="headerlink" title="2.4 ReadWriteLock"></a>2.4 ReadWriteLock</h2><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Lock <span class="title function_">readLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Lock <span class="title function_">writeLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成 2 个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的<strong>ReentrantReadWriteLock</strong> 实现了 ReadWriteLock 接口。</p><p>ReentrantReadWriteLock 里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和 writeLock()用来获取读锁和写锁。</p><p>下面通过几个例子来看一下 ReentrantReadWriteLock 具体用法。</p><p>假如有多个线程要同时进行读操作的话，先看一下 synchronized 达到的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">&quot;正在进行读操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(thread.getName()+<span class="string">&quot;读操作完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而改成读写锁的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        rwl.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">&quot;正在进行读操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">&quot;读操作完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明thread1和thread2在同时进行读操作。这样就大大提升了毒操作的效率。</strong></p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p><ul><li>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</li><li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li></ul><h2 id="2-5小结-重点"><a href="#2-5小结-重点" class="headerlink" title="2.5小结(重点)"></a>2.5小结(重点)</h2><p>Lock和synchronized有以下几点不同：</p><p>1.Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</p><p>2.synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有通过unlock()去主动释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally代码块中释放锁；</p><p>3.Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</p><p>4.通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</p><p>5.Lock可以提高多个线程进行读操作的效率。</p><p><strong>在性能上来说，如果竞争不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Lock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/post/72e3b671.html"/>
      <url>/post/72e3b671.html</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>模式定义</strong>：</p><p>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式的变化独立于算法的使用者。</p><p><img src="/post/72e3b671/image-20230423142656652.png" alt="image-20230423142656652"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">GreenPen</span>());</span><br><span class="line">        context.executeDraw(<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> radius, <span class="type">int</span> x, <span class="type">int</span> y )</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedPen</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> radius, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用红笔画画.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreenPen</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> radius, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用绿笔画画.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeDraw</span><span class="params">(<span class="type">int</span> radius, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.draw(radius,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/72e3b671/image-20230423143811170.png" alt="image-20230423143811170"></p>]]></content>
      
      
      <categories>
          
          <category> 策略模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/post/9bd93306.html"/>
      <url>/post/9bd93306.html</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p><strong>模式定义</strong>：</p><p>在不改变原有对象的基础上，将功能附加到对象上。</p><p>  <img src="/post/9bd93306/image-20230422163657266.png" alt="image-20230422163657266"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取原茶</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line">        <span class="comment">// 加配料</span></span><br><span class="line">        beverage = <span class="keyword">new</span> <span class="title class_">Lemon</span>(beverage);</span><br><span class="line">        <span class="comment">// 加配料</span></span><br><span class="line">        beverage = <span class="keyword">new</span> <span class="title class_">Pearl</span>(beverage);</span><br><span class="line">        System.out.println(beverage.getDescription()+<span class="string">&quot;价格：&quot;</span>+beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原茶</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="comment">// 返回描述</span></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回价格</span></span><br><span class="line">     <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackTea</span> <span class="keyword">implements</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;红茶☕️&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreenTea</span>  <span class="keyword">implements</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;绿茶🍵&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">implements</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;咖啡☕️&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调料</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Condiment</span> <span class="keyword">implements</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加柠檬</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lemon</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Lemon</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription()+<span class="string">&quot;加柠檬🍋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost()+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加珍珠</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pearl</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pearl</span><span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription()+<span class="string">&quot;加珍珠&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost()+<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><p>扩展一个类的功能或给一个类添加附加职责</p><p><strong>优点</strong>：</p><p>1.不改变原有对象的情况下给予一个对象扩展功能</p><p>2.使用不同的组合可以实现不同的效果</p><p>3.符合开闭原则</p><p><strong>经典应用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Servlet.Api;</span><br><span class="line">javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line">javax.servlet.http.HttpServletResponseWrapper;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 装饰器模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/post/f5c535ea.html"/>
      <url>/post/f5c535ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><strong>模式定义</strong>：</p><p>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h1 id><a href="#" class="headerlink" title></a><img src="/post/f5c535ea/image-20230421183157520.png" alt="image-20230421183157520"></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="type">Adapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>(adaptee);</span><br><span class="line">        adapter.output5v();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">outPut220v</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">output5v</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span> <span class="params">(Adaptee adaptee)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">output5v</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> adaptee.outPut220v();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;原始电压：%d v -&gt; 输出电压： %d v&quot;</span>,i,<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/post/f5c535ea/image-20230421183319248.png" alt="image-20230421183319248"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">        adapter.outPut5v();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">outPut220v</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">outPut5v</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">outPut5v</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> outPut220v();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;原始电压 %d v -&gt; 输出电压 %d v&quot;</span>,i,<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><p>1.当你希望使用某些现有类，但其接口与您的其他代码不兼容时，请使用适配器类。</p><p>2.当你希望重用几个现有的子类，这些子类缺少一些不能添加到超类中的公共功能时，请使用该模式。</p><p><strong>优点</strong>：</p><p>1.符合单一职责原则、</p><p>2.符合开闭原则</p><p><strong>适配器总结</strong>：</p><p>类适配器采用继承，对象适配器采用组合；</p><p>类适配器属于静态实现，对象适配器属于组合的动态实现，对象适配器需要多实例化一个对象。</p><p>总体来说，对象适配器用的比较多。</p><p><strong>JDK &amp; Spring源码中的应用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JDK:</span><br><span class="line">java.util.Arrays#asList()</span><br><span class="line">java.util.Collections#list()</span><br><span class="line">Spring:</span><br><span class="line">org.springframework.context.event.GenericApplicationListenerAdapter</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 适配器模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>门面模式</title>
      <link href="/post/f9ad3ad5.html"/>
      <url>/post/f9ad3ad5.html</url>
      
        <content type="html"><![CDATA[<h1 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h1><p><img src="/post/f9ad3ad5/image-20230420220206220.png" alt="image-20230420220206220"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ShapeMaker</span> <span class="variable">shapeMaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeMaker</span>();</span><br><span class="line">        shapeMaker.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeMaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Circle circle;</span><br><span class="line">    <span class="keyword">private</span> Rectangle rectangle;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShapeMaker</span><span class="params">()</span>&#123;</span><br><span class="line">        circle = <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">        circle.draw();</span><br><span class="line">        rectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模式定义</strong>：为子系统中的一组接口提供一个一致的接口，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>应用场景</strong>:</p><p>1.当您需要使用复杂子系统的有限但直接的接口时，请使用Facade模式。</p><p>2.当您想要将子系统组织成层时，请使用Facade。</p><p><strong>优点</strong>：</p><p>简化客户端的调用</p><p>源码中的经典应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.connector.RequestFacade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 门面模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 门面模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/post/e19da94a.html"/>
      <url>/post/e19da94a.html</url>
      
        <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p><strong>模式定义</strong>:运用共享技术有效地支持大量细粒度的对象。</p><p><strong>优点</strong>：如果系统有大量类似的对象，可以节省大量的内存及CPU资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> Tree tree;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Tree tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Tree <span class="title function_">getTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tree</span><span class="params">(String name, String data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;tree   created. &quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Tree&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Tree <span class="title function_">getTree</span><span class="params">(String name,String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Tree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(name, data);</span><br><span class="line">        map.put(name,tree);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK源码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String,Integer,Long...</span><br><span class="line">com.sun.org.apache.bcel.internal.generic.InstructionConstants;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 享元模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 享元模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者设计模式</title>
      <link href="/post/1cb61ca3.html"/>
      <url>/post/1cb61ca3.html</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p><strong>模式定义</strong>：将一个复杂对象的创建与它的表示分离，使得同样的构建过程创建不同的表示</p><p><img src="/post/1cb61ca3/image-20230414223539105.png" alt="image-20230414223539105"></p><p><strong>忽视Director、Product类,只关注建造本身</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String motherboard;</span><br><span class="line">    <span class="keyword">private</span> String monitor;</span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line">    <span class="keyword">private</span> String mouse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerBuilder</span><span class="params">(String cpu, String motherboard, String monitor, String keyboard, String mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.motherboard = motherboard;</span><br><span class="line">        <span class="built_in">this</span>.monitor = monitor;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ComputerBuilder&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, motherboard=&#x27;&quot;</span> + motherboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, monitor=&#x27;&quot;</span> + monitor + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mouse=&#x27;&quot;</span> + mouse + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">newBuilder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String motherboard;</span><br><span class="line">        <span class="keyword">private</span> String monitor;</span><br><span class="line">        <span class="keyword">private</span> String keyboard;</span><br><span class="line">        <span class="keyword">private</span> String mouse;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMotherboard</span><span class="params">(String motherboard)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.motherboard = motherboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMonitor</span><span class="params">(String monitor)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.monitor = monitor;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMouse</span><span class="params">(String mouse)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComputerBuilder</span>(cpu,motherboard,monitor,keyboard,mouse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>普通链式调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(String name, <span class="type">int</span> count, Double weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(Double weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&quot;, weight=&quot;</span> + weight +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ProductBuilder</span>&#123;</span><br><span class="line">        ProductBuilder <span class="title function_">makeName</span><span class="params">(String name)</span>;</span><br><span class="line">        ProductBuilder <span class="title function_">makeCount</span><span class="params">(<span class="type">int</span> count)</span>;</span><br><span class="line">        ProductBuilder <span class="title function_">makeWeight</span><span class="params">(Double weight)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ConcreteProductBuilder</span> <span class="keyword">implements</span> <span class="title class_">ProductBuilder</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ProductBuilder <span class="title function_">makeName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            product.setName(<span class="string">&quot;can&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ProductBuilder <span class="title function_">makeCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">            product.setCount(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ProductBuilder <span class="title function_">makeWeight</span><span class="params">(Double weight)</span> &#123;</span><br><span class="line">            product.setWeight(<span class="number">20.0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductDirector</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeProduct</span><span class="params">(ProductBuilder builder)</span>&#123;</span><br><span class="line">            builder.makeName(<span class="string">&quot;can&quot;</span>);</span><br><span class="line">            builder.makeCount(<span class="number">1</span>);</span><br><span class="line">            builder.makeWeight(<span class="number">2.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><p>1.需要生产的对象具有复杂的内部结构</p><p>2.需要生成的对象内部属性本身相互依赖</p><p>3.与不可变对象配合使用</p><p><strong>优点</strong>：</p><p>1、建造者独立，亦拓展</p><p>2、便于控制细节风险</p><p><strong>Spring源码中的应用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line">org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 建造者模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/post/9b7d6e62.html"/>
      <url>/post/9b7d6e62.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p><strong>模式定义</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p><p><img src="/post/9b7d6e62/image-20230413192152239.png" alt="image-20230413192152239"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IDatabaseUtils</span> <span class="variable">iDatabaseUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OracleDataBaseUtils</span>();</span><br><span class="line">        <span class="type">IConnection</span> <span class="variable">connection</span> <span class="operator">=</span> iDatabaseUtils.getConnection();</span><br><span class="line">        connection.connect();</span><br><span class="line">        <span class="type">ICommand</span> <span class="variable">command</span> <span class="operator">=</span> iDatabaseUtils.getCommand();</span><br><span class="line">        command.command();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变化 mysql，oracle</span></span><br><span class="line"><span class="comment">// connect，command</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySqlConnection</span> <span class="keyword">implements</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql connected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleConnection</span> <span class="keyword">implements</span> <span class="title class_">IConnection</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle connected.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySqlCommand</span> <span class="keyword">implements</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleCommand</span> <span class="keyword">implements</span> <span class="title class_">ICommand</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line">    IConnection <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">    ICommand <span class="title function_">getCommand</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlDataBaseUtils</span> <span class="keyword">implements</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IConnection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySqlConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICommand <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySqlCommand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OracleDataBaseUtils</span> <span class="keyword">implements</span> <span class="title class_">IDatabaseUtils</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IConnection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICommand <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleCommand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：程序需要处理不同系列的相关产品，但是您不希望它依赖于这些产品的具体类时，可以使用抽象工厂。</p><p><strong>优点</strong>：</p><p>1.可以确信你从工厂的到的产品彼此是兼容的。</p><p>2.可以避免具体产品到客户端代码之间的紧密耦合。</p><p>3.符合单一职责原则。</p><p>4.符合开闭原则。</p><p>JDK源码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Conection;</span><br><span class="line">java.sql.Driver;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 抽象工厂模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+markdown图片上传路径问题</title>
      <link href="/post/9169f285.html"/>
      <url>/post/9169f285.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-typora-github图片路径问题"><a href="#hexo-typora-github图片路径问题" class="headerlink" title="hexo+typora+github图片路径问题"></a>hexo+typora+github图片路径问题</h1><h2 id="一、typora资源文件夹设置"><a href="#一、typora资源文件夹设置" class="headerlink" title="一、typora资源文件夹设置"></a>一、typora资源文件夹设置</h2><p><img src="/post/9169f285/image-20230413022230995.png" alt="image-20230413022230995"></p><h2 id="二、相对路径应用的标签插件"><a href="#二、相对路径应用的标签插件" class="headerlink" title="二、相对路径应用的标签插件"></a>二、相对路径应用的标签插件</h2><p>首先引入hexo-renderer-marked –save</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>然后修改_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>开启了之后，图片资源就会自动解析成对应的图片路径。比如：“test.jpg” 位于 “src&#x3D;”&#x2F;post&#x2F;a24d988e&#x2F;test.png””,</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">![test](hexo</span><span class="string">-markdown图片上传路径问题/test.png)‘将会转换成’&lt;img</span> <span class="string">src=&quot;/post/a24d988e/test.png&quot;</span> <span class="string">alt=&quot;image-20230413011148293&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改插件hexo-renderer-marked lib目录下面的renderer.js文件：（大概在119行）</p><p><img src="/post/9169f285/image-20230413023311818.png" alt="image-20230413023311818"></p><p>添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(href.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">      href = href.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂设计模式</title>
      <link href="/post/a24d988e.html"/>
      <url>/post/a24d988e.html</url>
      
        <content type="html"><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>模式定义</strong>：定义一个用于创建对象的接口，让子类决定实例话哪一个类。Factory Method使得一个类的实例化延迟到之类</p><p><img src="/post/a24d988e/image-20230413011148293.png" alt="image-20230413011148293"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> application.getObject();</span><br><span class="line">        product.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前路漫漫亦灿灿😁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">    Product <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> createProduct();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><p>1.当你不知道该使用对象的确切类型的时候</p><p>2.当你希望为库或框架提供扩展其内部组件的方法时</p><p><strong>主要优点</strong>：</p><p>1.将具体产品和创建者耦合</p><p>2.符合单一职责原则</p><p>3.符合开闭原则</p><p><strong>源码中的应用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java api</span></span><br><span class="line">Calendar.getInstance()</span><br><span class="line">java.text.NumberFormat.getInstance()</span><br><span class="line">java.util.ResourceBundle.getBundle()</span><br><span class="line"><span class="comment">// 工厂方法</span></span><br><span class="line">java.net.URLStreamHandlerFactory</span><br><span class="line">javax.xml.bind.JAXBContext#createMarshaller</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工厂设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/post/cd333c07.html"/>
      <url>/post/cd333c07.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、单例模式的定义及使用场景"><a href="#一、单例模式的定义及使用场景" class="headerlink" title="一、单例模式的定义及使用场景"></a>一、单例模式的定义及使用场景</h2><p><strong>模式定义</strong>：保证一个类只有一个实例，并且提供一个全局访问点。</p><p><strong>场景</strong>：重量级的对象，不需要多个实例，如线程池，数据库连接池。</p><h2 id="二、单例模式的实现方式"><a href="#二、单例模式的实现方式" class="headerlink" title="二、单例模式的实现方式"></a>二、单例模式的实现方式</h2><h3 id="1-懒汉模式：延迟加载，只有在真正使用的时候，才开始实例化。"><a href="#1-懒汉模式：延迟加载，只有在真正使用的时候，才开始实例化。" class="headerlink" title="1.懒汉模式：延迟加载，只有在真正使用的时候，才开始实例化。"></a>1.懒汉模式：延迟加载，只有在真正使用的时候，才开始实例化。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazySingleton lazySingleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == lazySingleton)&#123;</span><br><span class="line">                <span class="comment">// double check</span></span><br><span class="line">                <span class="keyword">synchronized</span> (LazySingleton.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> == lazySingleton)&#123;</span><br><span class="line">                        <span class="comment">// 字节码层</span></span><br><span class="line">                        <span class="comment">// JIT，CPU</span></span><br><span class="line">                        <span class="comment">// 1.分配空间</span></span><br><span class="line">                        <span class="comment">// 2.引用赋值</span></span><br><span class="line">                        <span class="comment">// 3.初始化</span></span><br><span class="line">                        lazySingleton = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）线程安全问题</p><p>2）double check，枷锁优化</p><p>3）编译器(JIT),CPU有可能对指令进行重排序，导致使用到未初始化的实例，可以通过添加volatile关键字进行修饰，对于volatile修饰的字段，可以防止指令重拍。</p><h3 id="2-饿汉模式：类加载的初始化阶段就完成了实例的初始化，本质上就是借助于jvm类加载机制，保证实例的唯一性。"><a href="#2-饿汉模式：类加载的初始化阶段就完成了实例的初始化，本质上就是借助于jvm类加载机制，保证实例的唯一性。" class="headerlink" title="2.饿汉模式：类加载的初始化阶段就完成了实例的初始化，本质上就是借助于jvm类加载机制，保证实例的唯一性。"></a>2.饿汉模式：类加载的初始化阶段就完成了实例的初始化，本质上就是借助于jvm类加载机制，保证实例的唯一性。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HungrySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HungrySingleton</span> <span class="variable">hungrySingleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungrySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungrySingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (HungrySingleton.getInstance()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例模式不允许多个实例存在！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类加载过程：</p><p>1）加载二进制数据到内存中，生成对应的Class数据结构</p><p>2）连接：a.验证，b.准备（给类的静态成员变量赋默认值），c.解析</p><p>3）初始化：给类的静态变量赋值</p><p>只有在真正使用对应的类时，才会触发初始化（当前类时启动类即main函数所在类，直接new操作，访问静态属性，访问静态方法，用反射访问类，初始化一个类的子类等）。</p><h3 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3.静态内部类"></a>3.静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClassHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClassHolder.instance!=<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例模式不允许多个实例存在！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）本质上是利用类的加载机制来保证线程安全</p><p>2）只有在实际使用的时候，才会触发类的初始化，所以也是懒加载的一种形式。</p><h3 id="4-枚举类型"><a href="#4-枚举类型" class="headerlink" title="4.枚举类型"></a>4.枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(INSTANCE.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）天然不支持反射创建的实例，且有自己的反序列化机制</p><p>2）利用类加载自己保证线程安全</p><h3 id="5-反射攻击实例"><a href="#5-反射攻击实例" class="headerlink" title="5.反射攻击实例"></a>5.反射攻击实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;InnerClassSingleton&gt; declaredConstructor = InnerClassSingleton.class.getDeclaredConstructor();</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">innerClassSingleton</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> InnerClassSingleton.getInstance();</span><br><span class="line">        System.out.println(innerClassSingleton==instance);</span><br></pre></td></tr></table></figure><h3 id="6-序列化"><a href="#6-序列化" class="headerlink" title="6.序列化"></a>6.序列化</h3><p><strong>对象需要实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1324250553112887638L</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClassHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）可以利用指定方法来替换从反序列化流中的数据 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ANY-ACCESS-MODIFIER Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException;</span><br></pre></td></tr></table></figure><p><strong>Spring源码应用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring &amp;&amp; JDK</span></span><br><span class="line">java.lang.Runtime</span><br><span class="line">org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="line">org.springframework.beans.factory.support.DefaultSingletonBeanRegistry</span><br><span class="line">org.springframework.core.ReactiveAdapterRegistry</span><br><span class="line"><span class="comment">// Tomcat</span></span><br><span class="line">org.apache.catalina.webresources.TomcatURLStreamHandlerFactory</span><br><span class="line"><span class="comment">// 反序列化指定数据源</span></span><br><span class="line">java.util.Currency</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单例模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题整理</title>
      <link href="/post/d6058b93.html"/>
      <url>/post/d6058b93.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-redis为什么是单线程？"><a href="#1-redis为什么是单线程？" class="headerlink" title="1.redis为什么是单线程？"></a>1.redis为什么是单线程？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis是单线程的原因在于redis用单个CPU绑定一块内存的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的。redis核心就是，如果我的数据全都在内存里，我单线程的去操作就是效率最高的。所以，redis是单线程。</span><br><span class="line">官方答案：因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</span><br></pre></td></tr></table></figure><h2 id="2-深拷贝和浅拷贝的区别？以及深拷贝最简单的实现方式？"><a href="#2-深拷贝和浅拷贝的区别？以及深拷贝最简单的实现方式？" class="headerlink" title="2.深拷贝和浅拷贝的区别？以及深拷贝最简单的实现方式？"></a>2.深拷贝和浅拷贝的区别？以及深拷贝最简单的实现方式？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">浅拷贝： 将原对象或原数组的引用直接赋给新对象，新数组，新对象／数组只是原对象的一个引用</span><br><span class="line">深拷贝： 创建一个新的对象和数组，将原对象的各项属性的“值”（数组的所有元素）拷贝过来，是“值”而不是“引用”</span><br><span class="line">第一种实现方式是重写clone方法来实现深拷贝(实现cloneable接口)</span><br><span class="line">第二种通过对象序列化实现深拷贝(实现Serializable接口)</span><br></pre></td></tr></table></figure><h2 id="3-beanFactory和ApplicationContext的区别？"><a href="#3-beanFactory和ApplicationContext的区别？" class="headerlink" title="3.beanFactory和ApplicationContext的区别？"></a>3.beanFactory和ApplicationContext的区别？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。</span><br><span class="line">BeanFactory:BeanFactory是Spring里面最底层的接口,是Ioc的核心,定义了Ioc的基本功能,包含了各种Bean的定义、加载、实例化,依赖注入和生命周期管理;</span><br><span class="line">ApplicationContext:ApplicationContext接口作为BeanFactory的子类,除了提供BeanFactory所具有的功能外,还提供了更完整的框架功能:</span><br><span class="line">①继承MessageSource,因此支持国际化</span><br><span class="line">②资源文件访问，如URL和文件（ResourceLoader）</span><br><span class="line">③载入多个（有继承关系）上下文（及同时加载多个配置文件），使得每一个上下文都专注于一个特定的层次</span><br><span class="line">④提供在监听器中注册bean的事件；</span><br></pre></td></tr></table></figure><h2 id="4-并发编程。乐观锁和悲观锁。"><a href="#4-并发编程。乐观锁和悲观锁。" class="headerlink" title="4.并发编程。乐观锁和悲观锁。"></a>4.并发编程。乐观锁和悲观锁。</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">乐观锁：指的是在操作数据的时候非常乐观，乐观地认为别人不会同时修改数据，因此乐观锁默认是不会上锁的，只有在执行更新的时候才会去判断在此期间别人是否修改了数据，如果别人修改了数据则放弃操作，否则执行操作。</span><br><span class="line">指的是在操作数据的时候比较悲观，悲观地认为别人一定会同时修改数据，因此悲观锁在操作数据时是直接把数据上锁，直到操作完成之后才会释放锁，在上锁期间其他人不能操作数据。</span><br></pre></td></tr></table></figure><h2 id="5-线程池创建方式有几种？"><a href="#5-线程池创建方式有几种？" class="headerlink" title="5.线程池创建方式有几种？"></a>5.线程池创建方式有几种？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">线程池的创建方式总共包含以下 7 种（其中 6 种是通过 Executors 创建的，1 种是通过 ThreadPoolExecutor 创建的）：</span><br><span class="line">Executors.newFixedThreadPool：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待；</span><br><span class="line">Executors.newCachedThreadPool：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；</span><br><span class="line">Executors.newSingleThreadExecutor：创建单个线程数的线程池，它可以保证先进先出的执行顺序；</span><br><span class="line">Executors.newScheduledThreadPool：创建一个可以执行延迟任务的线程池；</span><br><span class="line">Executors.newSingleThreadScheduledExecutor：创建一个单线程的可以执行延迟任务的线程池；</span><br><span class="line">Executors.newWorkStealingPool：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</span><br><span class="line">ThreadPoolExecutor：最原始的创建线程池的方式，它包含了 7 个参数可供设置，后面会详细讲。</span><br></pre></td></tr></table></figure><h2 id="6-类的加载过程"><a href="#6-类的加载过程" class="headerlink" title="6.类的加载过程"></a>6.类的加载过程</h2><p><img src="/post/d6058b93/image-20230306144451940.png" alt="image-20230306144451940"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">读取加载class文件---&gt;链接过程[验证、准备、解析]---&gt;初始化</span><br><span class="line">通过双亲委派模型实现（倚父）</span><br><span class="line">打破双亲委派模型？</span><br><span class="line">1）自定义类加载器，重写loadclass</span><br><span class="line">2）spi机制绕开loadclass方法，当前线程设定关联加载器。spi机制：加载第三方扩展的jar包类初始化</span><br><span class="line">本地磁盘文件Java代码变为的class文件</span><br><span class="line">通过网络下载的class文件</span><br><span class="line">war、jar解压的class文件</span><br><span class="line">从专门的数据库中读取的class文件</span><br><span class="line">使用Java cglib、动态代理生成的代理类class文件</span><br></pre></td></tr></table></figure><h2 id="7-包装类和普通类的区别？"><a href="#7-包装类和普通类的区别？" class="headerlink" title="7.包装类和普通类的区别？"></a>7.包装类和普通类的区别？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">普通类有默认值，包装类没有默认值，初始值是null.</span><br><span class="line">普通类在局部变量表里面，包装类在堆里</span><br><span class="line">普通类型可以直接定义，包装类需要new关键字</span><br></pre></td></tr></table></figure><h2 id="8-事务的传播机制类型"><a href="#8-事务的传播机制类型" class="headerlink" title="8.事务的传播机制类型"></a>8.事务的传播机制类型</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过transactionDefinition类中定义了事务传播的七种类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前存在事务，那么就加入这个事务，不存在就新建一个事务。</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 如果当前有事务，加入事务，如果没有则不使用事务</span></span><br><span class="line"><span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 必须在一个事务中执行，如果没有事务，则抛出异常</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不管是否存在事务，都以最新的事务执行，执行完在执行旧的事务</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表示不支持事务，如果有事务也不加入事</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以非事务的方式执行，如果存在事务异常</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果调用者不存在事务，那么被调用者自己创建事务，这种情况和REQUIRE一样。</span></span><br><span class="line">  <span class="comment">// 如果调用者存在事务，那么被调用者就在调用者的事务里嵌套一个事务，称为嵌套事务。</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-AOP有几种通知类型？执行顺序是什么样的？"><a href="#9-AOP有几种通知类型？执行顺序是什么样的？" class="headerlink" title="9.AOP有几种通知类型？执行顺序是什么样的？"></a>9.AOP有几种通知类型？执行顺序是什么样的？</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aop：1.定义切点 2.定义切面逻辑 3.织入</span><br><span class="line">有五种通知类型？</span><br><span class="line">1.前置通知（@Before）:设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.后置通知（@After）：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法后运行</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.抛出异常后的通知（@AfterThrowing）:设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.返回后的通知（@AfterReturning）:设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法正常执行完毕后运行</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.环绕通知（@Around）：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;around advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行顺序：</span><br><span class="line">@Around 前部分业务逻辑</span><br><span class="line">@Before业务逻辑</span><br><span class="line">@AfterReturning业务逻辑</span><br><span class="line">@AfterThrowing业务逻辑</span><br><span class="line">@After业务逻辑</span><br><span class="line">@Around后部分业务逻辑</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/post/d0edc1ed.html"/>
      <url>/post/d0edc1ed.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwd:</span> <span class="string">显示用户所在的目录</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ls:</span> <span class="string">对于目录，该命令列出该目录下的所有子目录与文件。对于文件，将列出文件名以及其他信息</span></span><br><span class="line"><span class="string">格式:</span> <span class="string">ls</span> [<span class="string">选项</span>][<span class="string">目录或文件</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">查看当前目录下的文件，包括隐藏文件</td></tr><tr><td align="center">-l</td><td align="center">长格式显示文件</td></tr><tr><td align="center">-lh</td><td align="center">以方便阅读的长格式显示</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd:</span> <span class="string">改变工作目录。将工作目录改变到指定的目录下。</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">cd</span>  <span class="string">目录名</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">cd ..</td><td align="center">返回上一级目录</td></tr><tr><td align="center">cd ..&#x2F;..</td><td align="center">返回上两级目录</td></tr><tr><td align="center">cd ~</td><td align="center">切换到home目录</td></tr><tr><td align="center">cd &#x2F;</td><td align="center">切换到根目录</td></tr><tr><td align="center">cd &#x2F;home&#x2F;lx&#x2F;linux1&#x2F;</td><td align="center">绝对路径：从home目录出发，直到去想要的目录</td></tr><tr><td align="center">cd …&#x2F;lx&#x2F;</td><td align="center">相对路径：从当前目录出发，直到去想要的目录</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">grep:</span> <span class="string">用于查找文件里符合条件的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">grep</span> [<span class="string">选项</span>] <span class="string">‘查找字符串’</span> <span class="string">文件名</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">将binary文件以text文件的方式查找数据</td></tr><tr><td align="center">-c</td><td align="center">计算找到‘查找字符串’的次数</td></tr><tr><td align="center">-i</td><td align="center">忽略大小写的区别，即把大小写视为相同</td></tr><tr><td align="center">-v</td><td align="center">反向选择，即显示出没有‘查找字符串’内容的那一行</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">find:</span> <span class="string">用来在指定目录下查找文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">find</span> [<span class="string">路径</span>] [<span class="string">选项</span>] <span class="string">操作</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-name test</td><td>查询指定目录下，命明为test的文件</td></tr><tr><td>-size + 100k</td><td>查询指定目录下，文件大于100k的文件</td></tr><tr><td>-ctime n</td><td>查询指定目录下，在过去n天内被修改过的文件</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chmod:</span> <span class="string">控制用户对文件的权限的命令</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">赋予读取权限</td></tr><tr><td align="center">-w</td><td align="center">赋予写入权限</td></tr><tr><td align="center">-x</td><td align="center">赋予执行权限</td></tr><tr><td align="center">777</td><td align="center">赋予可读、可写、可执行权限(读：4，写2，执行：1)</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ps:</span>  <span class="string">用来列出系统当中正在运行的那些进程，类似于Windows的任务管理器</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">ps</span> [<span class="string">选项</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">列出所有的进程(重要)</td></tr><tr><td align="center">-ef</td><td align="center">查看全格式的全部进程(重要)</td></tr><tr><td align="center">-w</td><td align="center">显示加宽可以显示较多的资讯</td></tr><tr><td align="center">-au</td><td align="center">显示详细的资讯</td></tr><tr><td align="center">-aux</td><td align="center">显示所有包含其他使用这的行程</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kill:</span> <span class="string">用于删除执行中的程序或工作</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">kill</span> [<span class="string">选项</span>]<span class="string">/[信号]</span> <span class="string">进程号</span></span><br><span class="line"></span><br><span class="line"><span class="string">常用选项:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">参数会列出全部的信息名称</td></tr><tr><td align="center">-s</td><td align="center">指定要送出的信息</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">常用信号:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">信号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-1(HUP)</td><td align="center">重新加载一个进程</td></tr><tr><td align="center">-9(KULL)</td><td align="center">杀死一个进程(重要)</td></tr><tr><td align="center">-15(TERM)</td><td align="center">正常停止一个进程</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tail:</span> <span class="string">查看测试项目的日志</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">tail</span> [<span class="string">选项</span>] <span class="string">文件名</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">实时读取</td></tr><tr><td align="center">-1000</td><td align="center">查看最近1000行日志</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netstat:</span> <span class="string">查看端口</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">netstat</span> <span class="string">-anp</span> <span class="string">|</span> <span class="string">grep端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date:</span> <span class="string">查看当前系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">date</span> <span class="string">+%[选项]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">星期几(数字几)</td></tr><tr><td align="center">A</td><td align="center">星期几(星期几)</td></tr><tr><td align="center">b</td><td align="center">月份</td></tr><tr><td align="center">B</td><td align="center">月份</td></tr><tr><td align="center">c</td><td align="center">直接显示日期与时间</td></tr><tr><td align="center">d</td><td align="center">日</td></tr><tr><td align="center">D</td><td align="center">直接显示日期</td></tr><tr><td align="center">F</td><td align="center">日期(yyyy-mm-dd)</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">echo:</span> <span class="string">打印信息</span></span><br><span class="line"></span><br><span class="line"><span class="string">格式:</span> <span class="string">echo</span> <span class="string">打印</span> <span class="string">选项</span> <span class="string">-e</span></span><br><span class="line"></span><br><span class="line"><span class="string">打印常量</span> <span class="string">直接打印</span></span><br><span class="line"><span class="string">打印变量</span> <span class="string">变量前加$</span></span><br><span class="line"><span class="string">打印命令</span> <span class="string">用反引号把命令引起来</span></span><br><span class="line"><span class="string">终端间传递信息</span> <span class="string">echo</span> <span class="string">内容&gt;/dev/pts/终端号</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">top:</span> <span class="string">用于实时显示process的动态</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用权限:</span> <span class="string">所有使用者</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</td></tr><tr><td align="center">q</td><td align="center">没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</td></tr><tr><td align="center">c</td><td align="center">切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称</td></tr><tr><td align="center">S</td><td align="center">累积模式，会将己完成或消失的子进程 ( dead child process ) 的 CPU time 累积起来</td></tr><tr><td align="center">s</td><td align="center">安全模式，将交谈式指令取消, 避免潜在的危机</td></tr><tr><td align="center">i</td><td align="center">不显示任何闲置 (idle) 或无用 (zombie) 的进程</td></tr><tr><td align="center">n</td><td align="center">更新的次数，完成后将会退出 top</td></tr><tr><td align="center">b</td><td align="center">批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC高并发编程一(JUC概述)</title>
      <link href="/post/4375d06b.html"/>
      <url>/post/4375d06b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1 什么是JUC"></a>1 什么是JUC</h1><p><img src="/post/4375d06b/image-20230425232826522.png" alt="image-20230425232826522"></p><h2 id="1-1-JUC简介"><a href="#1-1-JUC简介" class="headerlink" title="1.1 JUC简介"></a>1.1 JUC简介</h2><p>JUC就是java.util.concurrent工具包的简称。这是一个处理线程的工具包,JDK 1.5开始出现。</p><h2 id="1-2-进程与线程"><a href="#1-2-进程与线程" class="headerlink" title="1.2 进程与线程"></a>1.2 进程与线程</h2><p><strong>进程</strong>（<strong>Process</strong>）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。<br><strong>线程</strong>（<strong>Thread</strong>）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p><strong>总结来说:</strong><br>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——资源分配的最小单位。<br>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。是程序执行的最小单位。</p><h2 id="1-3-线程的状态"><a href="#1-3-线程的状态" class="headerlink" title="1.3 线程的状态"></a>1.3 线程的状态</h2><h3 id="1-3-1-线程状态枚举类"><a href="#1-3-1-线程状态枚举类" class="headerlink" title="1.3.1 线程状态枚举类"></a>1.3.1 线程状态枚举类</h3><p><strong>Thread.State</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        NEW(新建),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">         * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">         * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">         * such as processor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNABLE(准备就绪),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">         * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">         * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">         * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLOCKED(阻塞),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">         * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">         * following methods:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">         * perform a particular action.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WAITING(等待),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">         * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">         * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TIMED_WAITING(超时),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">         * The thread has completed execution.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TERMINATED(终结);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-wait-x2F-sleep的区别"><a href="#1-3-2-wait-x2F-sleep的区别" class="headerlink" title="1.3.2 wait&#x2F;sleep的区别"></a>1.3.2 wait&#x2F;sleep的区别</h3><p>（1）sleep是Thread的静态方法，wait是Object的方法，任何实例都能调用。<br>（2）sleep不会释放锁，它也不需要占用锁。wait会释放锁，但调用它的前提是当前线程占有锁(即代码要在Synchronized中)。<br>（3）他们都能被interrupt方法中断。</p><h2 id="1-4并发与串行"><a href="#1-4并发与串行" class="headerlink" title="1.4并发与串行"></a>1.4并发与串行</h2><h3 id="1-4-1-串行模式"><a href="#1-4-1-串行模式" class="headerlink" title="1.4.1 串行模式"></a>1.4.1 串行模式</h3><p>串行表示所有任务都一一按先后顺序进行。串行意味着必须先装完一车柴才能<br>运送这车柴，只有运送到了，才能卸下这车柴，并且只有完成了这整个三个步<br>骤，才能进行下一个步骤。<br><strong>串行是一次只能取得一个任务，并执行这个任务。</strong></p><h3 id="1-4-2并行模式"><a href="#1-4-2并行模式" class="headerlink" title="1.4.2并行模式"></a>1.4.2并行模式</h3><p>并行意味着可以同时取得多个任务，并同时去执行所取得的这些任务。并行模式相当于将长长的一条队列，划分成了多条短队列，所以并行缩短了任务队列的长度。并行的效率从代码层次上强依赖于多进程&#x2F;多线程代码，从硬件角度上则依赖于多核 CPU。</p><h3 id="1-4-3并发"><a href="#1-4-3并发" class="headerlink" title="1.4.3并发"></a>1.4.3并发</h3><p> <strong>并发(concurrent)指的是多个程序可以同时运行的现象，更细化的是多进程可以同时运行或者多指令可以同时运行</strong>。但这不是重点，在描述并发的时候也不会去扣这种字眼是否精确，&#x3D;&#x3D;并发的重点在于它是一种现象&#x3D;&#x3D;, &#x3D;&#x3D;并发描述的是多进程同时运行的现象&#x3D;&#x3D;。但实际上，对于单核心 CPU 来说，同一时刻只能运行一个线程。所以，这里的”同时运行”表示的不是真的同一时刻有多个线程运行的现象，这是并行的概念，而是提供一种功能让用户看来多个程序同时运行起来了，但实际上这些程序中的进程不是一直霸占 CPU 的，而是执行一会停一会。</p><p> <strong>要解决大并发问题，通常是将大任务分解成多个小任务</strong>, 由于操作系统对进程的调度是随机的，所以切分成多个小任务后，可能会从任一小任务处执行。这可能会出现一些现象：</p><p>​    • 可能出现一个小任务执行了多次，还没开始下个任务的情况。这时一般会采用队列或类似的数据结构来存放各个小任务的成果<br>​    • 可能出现还没准备好第一步就执行第二步的可能。这时，一般采用多路复用或异步的方式，比如只有准备好产生了事件通知才执行某个任务。<br>​    • 可以多进程&#x2F;多线程的方式并行执行这些小任务。也可以单进程&#x2F;单线程执行这些小任务，这时很可能要配合多路复用才能达到较高的效率</p><h3 id="1-4-4小结-重点"><a href="#1-4-4小结-重点" class="headerlink" title="1.4.4小结(重点)"></a>1.4.4小结(重点)</h3><p>​    <strong>并发</strong>：同一时刻多个线程在访问同一个资源，多个线程对一个点<br>​    例子：春运抢票 电商秒杀…<br>​    <strong>并行</strong>：多项工作一起执行，之后再汇总<br>​    例子：泡方便面，电水壶烧水，一边撕调料倒入桶中</p><h2 id="1-5管程"><a href="#1-5管程" class="headerlink" title="1.5管程"></a>1.5管程</h2><p>​    管程(monitor)是保证了同一时刻只有一个进程在管程内活动,即管程内定义的操作在同一时刻只被一个进程调用(由编译器实现).但是这样并不能保证进程以设计的顺序执行JVM 中同步是基于进入和退出管程(monitor)对象实现的，每个对象都会有一个管程(monitor)对象，管程(monitor)会随着 java 对象一同创建和销毁执行线程首先要持有管程对象，然后才能执行方法，当方法完成之后会释放管程，方法在执行时候会持有管程，其他线程无法再获取同一个管程</p><h2 id="1-6用户线程和守护线程"><a href="#1-6用户线程和守护线程" class="headerlink" title="1.6用户线程和守护线程"></a>1.6用户线程和守护线程</h2><p>​    <strong>用户线程</strong>:平时用到的普通线程,自定义线程<br>​    <strong>守护线程</strong>:运行在后台,是一种特殊的线程,比如垃圾回收<br>​    <strong>当主线程结束后,用户线程还在运行,JVM 存活</strong><br>​    <strong>如果没有用户线程,都是守护线程,JVM 结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
